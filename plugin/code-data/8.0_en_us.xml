<?xml version="1.0"?>

<codedata lang="en_us" version="8.0">
   <keywords>
      <keyword name="true" />
      <keyword name="false" />
      <keyword name="nil" />
      <keyword name="while" />
      <keyword name="do" />
      <keyword name="for" />
      <keyword name="foreach" />
      <keyword name="in" />
      <keyword name="if" />
      <keyword name="else" />
      <keyword name="print" />
      <keyword name="break" />
      <keyword name="continue" />
      <keyword name="import" />
      <keyword name="as" />
      <keyword name="return" />
      <keyword name="sub" />
   </keywords>

   <groups>
      <group name="array">
         <description></description>
         <functions>
            <func name="array.append">
               <parameters min="2" max="2" regex="..">
                  <param name="array1" />
                  <param name="array2" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Appends each element of array2 to the end of array1. Note that this behaviour is different to that of array.push(), which would add one new element to the end of array1 containing array2. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.push" />
               </relatedFunctions>
            </func>
            <func name="array.contains">
               <parameters min="2" max="2" regex="..">
                  <param name="array" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns whether or not the supplied array contains the specified value as an element. Note that it will not match elements inside sub-arrays. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.filter" />
               </relatedFunctions>
            </func>
            <func name="array.copy">
               <parameters min="1" max="1" regex=".">
                  <param name="array" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns a copy of the supplied array. This is semantically equivalent to `$arraycopy = $array`, however it will warn if the variable passed to it is not an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.create" />
               </relatedFunctions>
            </func>
            <func name="array.create">
               <parameters min="1" max="2" regex="..?">
                  <param name="size" />
                  <param name="default" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Creates a new array of the specified size and optionally fills the array with the default data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.resize" />
                  <related func="array.copy" />
               </relatedFunctions>
            </func>
            <func name="array.filter">
               <parameters min="2" max="3" regex="...?">
                  <param name="array" />
                  <param name="pattern" />
                  <param name="flags" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Removes elements from the supplied array that do not match the pattern. The optional 'flags' parameter contains a string of single-letter options. The following options are supported: &lt;ul&gt; &lt;li&gt;'i', meaning 'case insensitive' - letters in the pattern match both upper and lower case letters.&lt;/li&gt; &lt;li&gt;'!', meaning negate - elements of the array that match the regular expression are removed.&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="array.join">
               <parameters min="1" max="2" regex="..?">
                  <param name="array" />
                  <param name="separator" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Concatenates all the elements of the supplied array into a string separated by the separator. The elements will be separated by a space if no separator is supplied. Note that a warning will be printed should the supplied array itself contain any arrays or hashes. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.split" />
               </relatedFunctions>
            </func>
            <func name="array.length">
               <parameters min="1" max="1" regex=".">
                  <param name="array" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the length of the supplied array &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="array.pop">
               <parameters min="1" max="1" regex=".">
                  <param name="array" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Removes the last element of the supplied array and returns it as the result of the function. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.unshift" />
                  <related func="array.push" />
                  <related func="array.shift" />
               </relatedFunctions>
            </func>
            <func name="array.push">
               <parameters min="2" max="2" regex="..">
                  <param name="array" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Adds the supplied value to the end of the supplied array. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.shift" />
                  <related func="array.unshift" />
                  <related func="array.pop" />
               </relatedFunctions>
            </func>
            <func name="array.resize">
               <parameters min="2" max="3" regex="...?">
                  <param name="array" />
                  <param name="size" />
                  <param name="default" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Resizes the supplied array to the specified size. If the size of the array is being increased and the default parameter is specified then the new elements added to the array will be set to the default parameter. If the new size is smaller than the original size then the appropriate number of elements will be removed from the end of the array. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.create" />
               </relatedFunctions>
            </func>
            <func name="array.reverse">
               <parameters min="1" max="1" regex=".">
                  <param name="array" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Reverses the elements of the supplied array. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.sort" />
               </relatedFunctions>
            </func>
            <func name="array.shift">
               <parameters min="1" max="1" regex=".">
                  <param name="array" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Removes the first element of the supplied array and returns it as the result of the function. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.unshift" />
                  <related func="array.push" />
                  <related func="array.pop" />
               </relatedFunctions>
            </func>
            <func name="array.sort">
               <parameters min="1" max="2" regex="..?">
                  <param name="array" />
                  <param name="reverse" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sorts the supplied array alphanumerically. If the reverse parameter is supplied then the array will be sorted in reverse. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.sortNumerical" />
               </relatedFunctions>
            </func>
            <func name="array.sortNumerical">
               <parameters min="1" max="2" regex="..?">
                  <param name="array" />
                  <param name="reverse" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sort the supplied array numerically in ascending order. If the reverse parameter is supplied then the array will be sorted in descending order. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.sort" />
               </relatedFunctions>
            </func>
            <func name="array.splice">
               <parameters min="3" max="INF" regex="....*">
                  <param name="array" />
                  <param name="offset" />
                  <param name="length" />
                  <param name="values" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Replace elements in the supplied array. Any elements between offset and length will be removed from the array and any extra values specified after the length parameter will be inserted into the array at that location. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.filter" />
               </relatedFunctions>
            </func>
            <func name="array.unshift">
               <parameters min="2" max="2" regex="..">
                  <param name="array" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Adds the supplied value to the front of the supplied array. The return value of this function can be used as the argument to another function to perform multiple operations on the same array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.shift" />
                  <related func="array.push" />
                  <related func="array.pop" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="connection">
         <description>Generic functions that affect the current connection.</description>
         <functions>
            <func name="connection.checkLimits">
               <parameters min="0" max="1" regex=".?">
                  <param name="poolname" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; This function checks to see if the connection will be queued due to backend connection limits. The function returns 1 if the connection is within configured maximum limits for the named pool ( See max_connections_pernode setting in Pool &amp;gt; Connection Management ). The function returns 0 if the connection will exceed the configured maximum limits and will be queued. &lt;br/&gt; If the named pool does not exist, your traffic manager will log a warning message and a value of -1 will be returned. &lt;br/&gt; &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="connection.close">
               <parameters min="1" max="2" regex=".|..">
                  <param name="Data" />
                  <param name="Read" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Writes the provided data directly back to the client. After the data has been sent, the connection is closed. &lt;br/&gt; The optional second argument specifies whether data should continue to be read in from the client after sending this response, and wait for it to close the connection. If set to 0, the connection will close immediately. If non-zero, the traffic manager will wait and read any remaining data from the connection before closing it. &lt;br/&gt; The default behaviour is to wait, because some client software will not read a response until it has sent its entire request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.discard" />
                  <related func="http.sendResponse" />
               </relatedFunctions>
            </func>
            <func name="connection.discard">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Immediately closes the current connection and stops processing rules. This is equivalent to the function call 'pool.use( "discard" )'. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.close" />
                  <related func="http.sendResponse" />
               </relatedFunctions>
            </func>
            <func name="connection.getBandwidthClass">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_BW" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the current bandwidth class for the connection to the client, or an empty string if no class is set. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by response.getBandwidthClass&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getBandwidthClass" />
                  <related func="request.getBandwidthClass" />
               </relatedFunctions>
            </func>
            <func name="connection.getData">
               <parameters min="1" max="1" regex=".">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
                  <restriction type="ZXTM_GENERIC" />
               </restrictions>
               <description>&lt;p&gt; Returns the first 'count' bytes of data provided by the client. &lt;br/&gt; Warning: you can stall a connection by asking it to read more data than the remote client will provide. Combine this with connection.getDataLen() to reliably read data from a connection. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.get&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getDataLen" />
               </relatedFunctions>
            </func>
            <func name="connection.getDataLen">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the number of bytes of data already received from the client. This can be combined with connection.getData() to reliably read data from a connection without stalling if no data is available. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.getLength&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getData" />
               </relatedFunctions>
            </func>
            <func name="connection.getLine">
               <parameters min="1" max="1" regex=".">
                  <param name="offset" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
                  <restriction type="ZXTM_GENERIC" />
               </restrictions>
               <description>&lt;p&gt; Returns a line of input data provided by the client. The line separator is '\n', and this is stripped off before returning the line. connection.getline() takes a single byte-count argument which indicates where to start scanning for a line; a value of '0' begins at the start, so returns the first line. &lt;br/&gt; When connection.getline() returns, the variable $1 is updated to point to the start of the next line in the datastream. &lt;br/&gt; You can iterate through the lines of input data by using $1 as the iterator variable. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.getLine&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getData" />
               </relatedFunctions>
            </func>
            <func name="connection.getLocalIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the IP address that the client connected to, i.e. the address local to this machine. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.getLocalIP&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getLocalPort" />
                  <related func="connection.getRemoteIP" />
                  <related func="connection.getRemotePort" />
               </relatedFunctions>
            </func>
            <func name="connection.getLocalPort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the network port number that the client connected to. (e.g. port 80 is normal for a web server) &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.getLocalPort&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getLocalIP" />
                  <related func="connection.getRemoteIP" />
                  <related func="connection.getRemotePort" />
               </relatedFunctions>
            </func>
            <func name="connection.getMemoryUsage">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an estimate of the amount of memory currently in use for this connection, in bytes. Memory is primarily used for buffering data, and the memory usage can be tuned using the various buffer size settings. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="connection.getNode">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the name of the back-end node that this request is connected to. If a back-end node has not been chosen, which is normally the case in request rules, it returns the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getPool" />
                  <related func="connection.getVirtualServer" />
                  <related func="request.avoidNode" />
               </relatedFunctions>
            </func>
            <func name="connection.getPersistence">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; In a Response rule this function returns the name of the current Session Persistence class used for this connection, or whatever class has been set by a previous use of &lt;tt&gt;connection.setPersistence()&lt;/tt&gt;. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.setPersistence" />
               </relatedFunctions>
            </func>
            <func name="connection.getPool">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the name of the pool that this request is connected to. If a pool has not been chosen, it returns the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getNode" />
                  <related func="connection.getVirtualServer" />
               </relatedFunctions>
            </func>
            <func name="connection.getRemoteIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the remote IP address of the client. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.getRemoteIP&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getRemotePort" />
                  <related func="connection.getLocalIP" />
                  <related func="connection.getLocalPort" />
               </relatedFunctions>
            </func>
            <func name="connection.getRemotePort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the remote port of the client's connection. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.getRemotePort&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getRemoteIP" />
                  <related func="connection.getLocalIP" />
                  <related func="connection.getLocalPort" />
               </relatedFunctions>
            </func>
            <func name="connection.getServiceLevelClass">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SLM" />
               </restrictions>
               <description>&lt;p&gt; Returns the current service level class for the connection, or an empty string if no class is set. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.setServiceLevelClass" />
               </relatedFunctions>
            </func>
            <func name="connection.getVirtualServer">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the name of the Virtual Server that the rule is running under. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getNode" />
                  <related func="connection.getPool" />
               </relatedFunctions>
            </func>
            <func name="connection.setBandwidthClass">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_BW" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Sets the bandwidth class for the current connection to the client. Providing an empty class name removes the bandwidth class from the connection. It returns zero if an error occurs (for example, if the bandwidth class does not exist), and 1 otherwise. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by response.setBandwidthClass&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.setBandwidthClass" />
                  <related func="request.setBandwidthClass" />
               </relatedFunctions>
            </func>
            <func name="connection.setData">
               <parameters min="1" max="1" regex=".">
                  <param name="request data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Replaces the input data read from the client with the provided string. &lt;br/&gt; This is a low-level routine that should be used with care. For protocols with their own higher-level protocol managers (e.g. HTTP), use the higher level routines to alter the input data (e.g. http.setHeader() and http.setBody()). &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.set&lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="connection.setIdempotent">
               <parameters min="1" max="1" regex=".">
                  <param name="resend" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Marks a request as resendable or non-resendable. &lt;br/&gt; An &lt;i&gt;idempotent&lt;/i&gt; request has no detrimental side effects, so it can safely be attempted multiple times. A non-idempotent request has a side effect - for example, it may update a database, or initiate a purchase. &lt;br/&gt; By default, all non-HTTP requests are marked as idempotent. If a back-end node fails to generate a correct response when a request is initially forwarded to it, your traffic manager will attempt to resend the request to another node. &lt;br/&gt; connection.setIdempotent() can override this behaviour. If 'resend' is zero, this indicates that the request should only be attempted against one back-end node. &lt;br/&gt; If 'resend' has a non-zero value, this indicates that if a request is made to a back-end node and a correct response is not received, your traffic manager should retry the request against another back-end node. &lt;br/&gt; Note that a request cannot be resent once it has begun streaming data between the client and the node. Additionally, UDP connections cannot be marked as resendable (the UDP client application should handle failed UDP responses). &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by request.setIdempotent&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setIdempotent" />
               </relatedFunctions>
            </func>
            <func name="connection.setPersistence">
               <parameters min="0" max="1" regex=".?">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the Session Persistence class that will be used for the connection. This is used to override the default Session Persistence class that will be used once a Pool is selected. &lt;br/&gt; If no parameter is given then the current Session Persistence class will be removed and the Pool's default session persistence class will be used for this connection. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getPersistence" />
                  <related func="connection.setPersistenceKey" />
               </relatedFunctions>
            </func>
            <func name="connection.setPersistenceKey">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sets the value of the Session Persistence key that is used by a Universal Session Persistence type class. &lt;br/&gt; Setting the value to the empty string will remove any persistence key from the connection. &lt;br/&gt; A Session Persistence class that uses Universal Session Persistence attempts to ensure that every connection that provides the same key is directed to the same back-end node. &lt;br/&gt; This function has no effect if a different type of session persistence class is ultimately used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.setPersistence" />
               </relatedFunctions>
            </func>
            <func name="connection.setPersistenceNode">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sets the back-end node to be used by a NamedNode Persistence class. &lt;br/&gt; A Session Persistence class that uses NamedNode Persistence will then ensure that this node will be used for the request. The node must be valid and exist in the Pool being used. If no port number is given, or if the port number is not valid, then if there is a node with a matching name, it will be used. For example, if the node 'web:80' is specified, but there is only a 'web:443', then that node will be used instead. This is to help share session persistence between different services on the same machine. &lt;br/&gt; This function has no effect if a different type of session persistence class is ultimately used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.setPersistence" />
               </relatedFunctions>
            </func>
            <func name="connection.setServiceLevelClass">
               <parameters min="1" max="1" regex=".">
                  <param name="level" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SLM" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the service level class for the current connection. It returns zero if an error occurs (for example, if the service level class does not exist), and 1 otherwise &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.getServiceLevelClass" />
               </relatedFunctions>
            </func>
            <func name="connection.sleep">
               <parameters min="1" max="1" regex=".">
                  <param name="milliseconds" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Pauses processing of the current connection for the specified number of milliseconds. This can be used to rate-limit particular clients; for example, those asking for particular files, or from particular locations, or using particular user-agents. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="connection.data">
         <description>Functions that allow you to store and retrieve data stored for the lifetime of the current connection.</description>
         <functions>
            <func name="connection.data.get">
               <parameters min="1" max="1" regex=".">
                  <param name="key" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the value that was previously stored with the given key using connection.data.set() in the current connection, or returns the empty string if no data was stored. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.data.set" />
                  <related func="data.get" />
               </relatedFunctions>
            </func>
            <func name="connection.data.set">
               <parameters min="2" max="2" regex="..">
                  <param name="key" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Stores a value for this connection, associating it with the provided key. The value can be retrieved later when processing the same connection, using connection.data.get(). Once the connection finishes, the value cannot be retrieved. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.data.get" />
                  <related func="data.set" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="counter">
         <description>Functions for altering user defined counters.</description>
         <functions>
            <func name="counter.increment">
               <parameters min="1" max="2" regex=".|..">
                  <param name="counter" />
                  <param name="amount" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Increments the numbered counter. These counters are readable via SNMP, and can be graphed on the Current Activity page on the Administration Server. &lt;br/&gt; By default, the counter is incremented by one, but you can also supply an amount to increment the counter by. If a negative amount is supplied the counter is decremented. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="data">
         <description>Functions that allow you to store information shared between all rules.</description>
         <functions>
            <func name="data.get">
               <parameters min="1" max="1" regex=".">
                  <param name="key" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the value that was previously stored with the given key using data.set(), or returns the empty string if no data was stored. &lt;br/&gt; Values stored in this way are persistent; a value stored in one rule can later be retrieved by a different rule handling a different connection. Thus, a rule can maintain persistent state across connections. &lt;br/&gt; &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="data.set" />
                  <related func="data.remove" />
                  <related func="data.getMemoryUsage" />
               </relatedFunctions>
            </func>
            <func name="data.getMemoryFree">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the amount of free space, in bytes, available for storing information with data.set(). &lt;br/&gt; If memory space is low, then data.reset() can be used to clear some or all of the entries from the storage. Alternatively, the upper limit on memory can be configured using trafficscript!data_size on the Global Settings page. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="data.set" />
                  <related func="data.reset" />
                  <related func="data.getMemoryUsage" />
               </relatedFunctions>
            </func>
            <func name="data.getMemoryUsage">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an estimate of the amount of memory, in bytes, used by entries that have been stored by data.set(). &lt;br/&gt; This can be used to verify if a rule is storing excessive amounts of data, starving the host machine of memory. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="data.set" />
                  <related func="data.reset" />
                  <related func="data.getMemoryFree" />
               </relatedFunctions>
            </func>
            <func name="data.remove">
               <parameters min="1" max="1" regex=".">
                  <param name="key" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Removes the value that was previously associated with the given key using data.set(). &lt;br/&gt; data.remove() returns 1 if the item did exist, or 0 if it was not found. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="data.set" />
                  <related func="data.get" />
                  <related func="data.reset" />
               </relatedFunctions>
            </func>
            <func name="data.reset">
               <parameters min="0" max="1" regex=".?">
                  <param name="prefix" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Removes some or all of the mappings created by data.set(). With no arguments, it removes all keys. With a single argument, it removes all keys that begin with the supplied string. &lt;br/&gt; NOTE: Should you intend to delete a specific individual key, data.remove() is more suited to this task. It offers greater performance and also ensures there is no risk of accidentally deleting other keys that start with the same string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="data.set" />
                  <related func="data.remove" />
                  <related func="data.getMemoryUsage" />
                  <related func="data.getMemoryFree" />
               </relatedFunctions>
            </func>
            <func name="data.set">
               <parameters min="2" max="2" regex="..">
                  <param name="key" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Stores a value, associating it with the provided key. The value can be retrieved later using data.get(), even from a different rule or connection. &lt;br/&gt; The value will be stored as a string, implicit conversion of floating point numbers to strings can cause some precision loss. You can convert a floating point number into a string with no precision loss using 'string.sprintf( "%f", $val )'. Arrays and hashes are serialised before storing and will be deserialised into their original form when retrieved with data.get(). &lt;br/&gt; To prevent memory problems, there is an upper limit on the amount of data that can be stored in the TrafficScript data storage. This means that the data.set() may fail. The upper limit can be configured using trafficscript!data_size on the Global Settings page. &lt;br/&gt; data.set() returns true if the entry was stored, or false if there was no room. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="data.get" />
                  <related func="data.remove" />
                  <related func="data.getMemoryUsage" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="event">
         <description>Functions to generate custom events.</description>
         <functions>
            <func name="event.emit">
               <parameters min="2" max="2" regex="..">
                  <param name="custom event name" />
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Triggers a Custom Event identified by the 'custom event name'. Actions can be associated with the Custom Event by configuring an Event Type to contain a Custom Event with the specified 'custom event name', and then associating that Event Type with an Action. &lt;br/&gt; The 'custom event name' cannot contain '/' or control codes. &lt;br/&gt; In addition to custom actions, a log message will be produced containing the eventid and the message. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="log.info" />
                  <related func="log.warn" />
                  <related func="log.error" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="geo">
         <description>Functions for working out geographic location based on IP address.</description>
         <functions>
            <func name="geo.getCity">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the city of the supplied IPv4 address, or the empty string. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getCountry">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the country name of the supplied IPv4 address, or the empty string. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getCountryCode">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the two-character country code of the supplied IPv4 address, or the empty string. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getDistanceKM">
               <parameters min="4" max="4" regex="....">
                  <param name="lat1" />
                  <param name="lon1" />
                  <param name="lat2" />
                  <param name="lon2" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the distance in kilometres between two points on the earth's surface (identified by latitude and longitude), or -1 on error. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getDistanceMiles">
               <parameters min="4" max="4" regex="....">
                  <param name="lat1" />
                  <param name="lon1" />
                  <param name="lat2" />
                  <param name="lon2" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the distance in miles between two points on the earth's surface (identified by latitude and longitude), or -1 on error. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getIPDistanceKM">
               <parameters min="2" max="2" regex="..">
                  <param name="ip1" />
                  <param name="ip2" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the distance in kilometres between the locations of two IPv4 addresses. It will return -1 unless both locations can be found. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getIPDistanceMiles">
               <parameters min="2" max="2" regex="..">
                  <param name="ip1" />
                  <param name="ip2" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the distance in miles between the locations of two IPv4 addresses. It will return -1 unless both locations can be found. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getLatitude">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the decimal latitude of the supplied IPv4 address, or the empty string if the location is unknown. This may be accurate to city, region or only country level: to find out, check whether geo.getCity() and geo.getRegion() return empty strings. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getLocation">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_MSM" />
               </restrictions>
               <description>&lt;p&gt; Returns the name of the location in which this traffic manager is based.&lt;br/&gt; &lt;br/&gt; Note that traffic managers can be assigned to locations only when the Stingray Multi-Site Manager is enabled. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="geo.getLocationLonLat" />
               </relatedFunctions>
            </func>
            <func name="geo.getLocationLonLat">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_MSM" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing the longitude and latitude of the location to which this request was sent.&lt;br/&gt; &lt;br/&gt; Note that traffic managers can be assigned to locations only when Stingray Multi-Site Manager is enabled and locations can be assigned a latitude and longitude only when using the Global Load Balancing feature. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="geo.getLocation" />
               </relatedFunctions>
            </func>
            <func name="geo.getLongitude">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the decimal longitude of the supplied IPv4 address, or the empty string if the location is unknown. This may be accurate to city, region or only country level: to find out, check whether geo.getCity() and geo.getRegion() return empty strings. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getRegion">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the region (e.g. US state) of the supplied IPv4 address, or the empty string if the location is unknown or doesn't have a region. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="geo.getRegionCode">
               <parameters min="1" max="1" regex=".">
                  <param name="ip" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_GEO" />
               </restrictions>
               <description>&lt;p&gt; Returns the two-character region code (e.g. US state abbreviation) of the supplied IPv4 address, or the empty string. The code for a given region may differ between software versions. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="hash">
         <description></description>
         <functions>
            <func name="hash.contains">
               <parameters min="2" max="2" regex="..">
                  <param name="hash" />
                  <param name="key" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns whether the supplied hash contains a particular key. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="hash.keys" />
               </relatedFunctions>
            </func>
            <func name="hash.count">
               <parameters min="1" max="1" regex=".">
                  <param name="hash" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the number of items in the hash. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="hash.delete">
               <parameters min="2" max="2" regex="..">
                  <param name="hash" />
                  <param name="key" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Deletes the specified key from the hash. The return value of this function can be used as the argument to another function to perform multiple operations on the same hash. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="hash.keys" />
               </relatedFunctions>
            </func>
            <func name="hash.empty">
               <parameters min="1" max="1" regex=".">
                  <param name="hash" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Removes all the values from the hash. The return value of this function can be used as the argument to another function to perform multiple operations on the same hash. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="hash.keys" />
               </relatedFunctions>
            </func>
            <func name="hash.keys">
               <parameters min="1" max="1" regex=".">
                  <param name="hash" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an array containing the keys that map to values in the supplied hash data structure. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="hash.values" />
               </relatedFunctions>
            </func>
            <func name="hash.values">
               <parameters min="1" max="1" regex=".">
                  <param name="hash" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an array containing the values that have been mapped to in the hash. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="hash.keys" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="http">
         <description>HTTP protocol-specific functions.</description>
         <functions>
            <func name="http.addHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Modifies the current HTTP request, adding an HTTP header with the supplied value. A case-insensitive lookup is first performed in order to find any existing headers. If a match is found, a duplicate header will be added to the message along with the new value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setHeader" />
                  <related func="http.getHeader" />
                  <related func="http.removeHeader" />
                  <related func="http.headerExists" />
                  <related func="http.addResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="http.addResponseHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Adds an HTTP header to the HTTP response that will be sent back to the client. If the header already exists in the response, then this value will be appended to the existing value. The header lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setResponseHeader" />
                  <related func="http.getResponseHeader" />
                  <related func="http.removeResponseHeader" />
                  <related func="http.addHeader" />
               </relatedFunctions>
            </func>
            <func name="http.changeSite">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Redirect users to a new website. It is a more sophisticated version of http.redirect() that will preserve the original path that the request asked for. Note that it sends back a HTTP 301 redirect rather than the 302 response returned by http.redirect(). For instance, if the original request was for "http://www.example.com/image/image.jpg", then http.changeSite( "example.co.uk" ) would redirect the user to "http://example.co.uk/image/image.jpg" The redirection will preserve the original path (and any query string) of the request, together with the port number and protocol. If you wish to force any of these details, then you can specify them as part of the supplied host name. e.g. http.changeSite( "https://www.example.com" ) will always send people to a SSL-encrypted site. You can also add on a prefix to the path of the URL, e.g. http.changeSite( "www.example.com/oldsite" ) would redirect a request for "http://www.example.com/missing/page.html" to "http://www.example.com/oldsite/missing/page.html". If the original request matches the supplied redirection, then http.changeSite() will take no action and let the request continue. This ensures that no 'redirection loops' occur. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.sendResponse" />
                  <related func="http.redirect" />
               </relatedFunctions>
            </func>
            <func name="http.cookie">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of the named cookie. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by http.getCookie&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getCookie" />
               </relatedFunctions>
            </func>
            <func name="http.doesFormParamExist">
               <parameters min="1" max="1" regex=".">
                  <param name="Parameter" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Checks whether a form parameter is present, either in the URL query string, or if not found and the request is a POST, from the POST body data. It returns 1 if the parameter is present, and 0 if not.&lt;br/&gt; This is useful when there are form parameters with no value, e.g a query string like 'foo=bar&amp;amp;stuff&amp;amp;x=y' - the 'stuff' parameter has no value, but is present. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getFormParam" />
                  <related func="http.listFormParamNames" />
                  <related func="http.getFormParams" />
               </relatedFunctions>
            </func>
            <func name="http.getBody">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the body data of the request. HTTP clients use the body data for sending file uploads or for HTML form parameters. &lt;br/&gt; If the optional 'count' parameter is supplied, http.getBody() will only read and return this number of bytes. If count is 0, http.getBody() returns the entire request. &lt;br/&gt; If the request has no body, then this returns an empty string. This function is not usable in response rules, as the body data of the request will no longer be accessible. &lt;br/&gt; To read HTML form parameters, it is easier to use http.getFormParam() as that will work for GET and POST requests. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getBodyLines" />
                  <related func="http.setBody" />
                  <related func="http.getResponseBody" />
                  <related func="http.getFormParams" />
                  <related func="http.listFormParamNames" />
               </relatedFunctions>
            </func>
            <func name="http.getBodyLines">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Splits the body data of the HTTP request into individual lines and returns an array of the data. &lt;br/&gt; If the optional 'count' parameter is supplied, http.getBodyLines() will only read and return this number of bytes. If count is 0, http.getBodyLines() returns the entire request. &lt;br/&gt; If the request has no body, then this returns an empty array. This function is not usable in response rules, as the body data of the request will no longer be accessible. &lt;br/&gt; To read HTML form parameters, it is easier to use http.getFormParams() as that will work for GET and POST requests. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getBody" />
                  <related func="http.getResponseBodyLines" />
               </relatedFunctions>
            </func>
            <func name="http.getCookie">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the named cookie in the incoming HTTP request. &lt;br/&gt; http.getCookie is a helper method that makes it easier to parse the HTTP Cookie header and extract the values of that particular cookie, rather than using http.getHeader() directly. &lt;br/&gt; An HTTP 'Cookie' header can have multiple values, such as &lt;br/&gt; &amp;nbsp;&amp;nbsp;Cookie: user-id=Joe; user-type=gold &lt;br/&gt; http.getCookie( ... ) will retrieve the 'Cookie' header line and parse it, returning the value of the cookie. If the cookie does not exist, http.getCookie() will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getCookies" />
                  <related func="http.setCookie" />
                  <related func="http.removeCookie" />
                  <related func="http.getResponseCookie" />
               </relatedFunctions>
            </func>
            <func name="http.getCookies">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing the names of all the cookies in this request mapped to their values. &lt;br/&gt; An HTTP 'Cookie' header can have multiple values, such as &lt;br/&gt; &amp;nbsp;&amp;nbsp;Cookie: user-id=Joe; user-type=gold &lt;br/&gt; http.getCookies() will retrieve the 'Cookie' header line and parse it, returning a hash mapping all the cookie names to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getCookie" />
                  <related func="http.setCookie" />
                  <related func="http.removeCookie" />
                  <related func="http.getResponseCookies" />
               </relatedFunctions>
            </func>
            <func name="http.getFormParam">
               <parameters min="1" max="2" regex="..?">
                  <param name="Parameter" />
                  <param name="Separator" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the %-decoded form parameter from the URL query string, or if not found and the request is a POST, from the POST body data. &lt;br/&gt; If the parameter is provided twice, only the first will be returned, unless the optional separator is provided, in which case all matches will be returned, separated with this string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setQueryString" />
                  <related func="http.getRawURL" />
                  <related func="http.getBody" />
                  <related func="http.listFormParamNames" />
                  <related func="http.getFormParams" />
               </relatedFunctions>
            </func>
            <func name="http.getFormParamNames">
               <parameters min="1" max="1" regex=".">
                  <param name="Separator" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list containing the names of all the form parameters present in the URL query string and, if the request is a POST, in the POST body data. The names are returned as a single string, separated by the string supplied to this function. If the same parameter appears multiple times in the request, it will only appear once in the list returned by this function. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by http.listFormParamNames&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.listFormParamNames" />
                  <related func="http.getFormParam" />
                  <related func="http.doesFormParamExist" />
                  <related func="http.getFormParams" />
               </relatedFunctions>
            </func>
            <func name="http.getFormParams">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash mapping the names of all the form parameters present in the URL query string and, if the request is a POST, in the POST body data to their values. If the same parameter appears multiple times in the request then it will be mapped to an array of values in the hash that is returned by this function. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getFormParam" />
                  <related func="http.doesFormParamExist" />
                  <related func="http.listFormParamNames" />
               </relatedFunctions>
            </func>
            <func name="http.getHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of a named HTTP header in the HTTP request, or the empty string if the header does not exist or has an empty value. The lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getHeaders" />
                  <related func="http.setHeader" />
                  <related func="http.addHeader" />
                  <related func="http.removeHeader" />
                  <related func="http.headerExists" />
                  <related func="http.getResponseHeader" />
                  <related func="http.getHostHeader" />
                  <related func="http.getHeaders" />
               </relatedFunctions>
            </func>
            <func name="http.getHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the request. &lt;br/&gt; The headers are returned as a single string, separated by spaces. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by http.listHeaderNames&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.listHeaderNames" />
               </relatedFunctions>
            </func>
            <func name="http.getHeaders">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing all the header names in the request mapped to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getHeader" />
                  <related func="http.setHeader" />
                  <related func="http.addHeader" />
                  <related func="http.removeHeader" />
                  <related func="http.headerExists" />
                  <related func="http.getResponseHeaders" />
                  <related func="http.getHostHeader" />
               </relatedFunctions>
            </func>
            <func name="http.getHostHeader">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the HTTP Host header. This value is lowercased and has the port removed. Any trailing full stop is also removed. For example if the Host header is 'www.Brocade.com:80' then http.getHostHeader() returns 'www.brocade.com'. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getHeader" />
               </relatedFunctions>
            </func>
            <func name="http.getMethod">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the HTTP method that was used to make the request, such as GET or POST. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setMethod" />
               </relatedFunctions>
            </func>
            <func name="http.getMultipartAttachment">
               <parameters min="1" max="1" regex=".">
                  <param name="part" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the specified data out of a multipart encoded HTTP request. The data contained in the part is returned on success, or "" if it doesn't exist for that part. $1 contains the Content Type of the part, and $2 contains the complete headers for that part. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="http.getPath">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the %-decoded path in the HTTP request URL, stripping the query string if one was provided. If there is a leading scheme and authority prefix, this is removed as well, so the URL "http://www.example.com/content?page=44" will be returned as "/content". &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setPath" />
                  <related func="http.getRawURL" />
                  <related func="http.getQueryString" />
                  <related func="http.getRawQueryString" />
                  <related func="http.normalizePath" />
               </relatedFunctions>
            </func>
            <func name="http.getQueryString">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the %-decoded query string in the URL, or the empty string if no query string was provided. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setQueryString" />
                  <related func="http.getRawQueryString" />
                  <related func="http.setRawQueryString" />
                  <related func="http.getRawURL" />
               </relatedFunctions>
            </func>
            <func name="http.getRawQueryString">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the raw (non %-decoded) query string in the URL, or the empty string if no query string was provided. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setRawQueryString" />
                  <related func="http.getQueryString" />
                  <related func="http.setQueryString" />
                  <related func="http.getRawURL" />
               </relatedFunctions>
            </func>
            <func name="http.getRawURL">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the raw (non-decoded) URL data provided by the client in the first line of the HTTP request, after the method and before the HTTP version specifier. &lt;br/&gt; The raw URL data includes both the path and query string if supplied and is not decoded. It may also contain the protocol and hostname if the client sent them. It could contain %-escaped characters that can be used to disguise the contents of the URL. Use http.getPath() or http.getQueryString() to return the %-decoded version of the path or query string. &lt;br/&gt; This function could return raw urls of various forms including: &lt;ul&gt; &lt;li&gt;http://www.example.com/file.html&lt;/li&gt; &lt;li&gt;/file.html&lt;/li&gt; &lt;li&gt;/path/../file.html&lt;/li&gt; &lt;li&gt;/file.html?querystring&lt;/li&gt; &lt;li&gt;/file.html?qs%encoded&lt;/li&gt; &lt;/ul&gt;&lt;br/&gt; You can use http.normalizePath() on the path component to remove any '/../' or '/./' references. &lt;br/&gt; In general it is better to use http.getPath() and http.getQueryString() to avoid the need to process the raw url. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getPath" />
                  <related func="http.getQueryString" />
                  <related func="http.getRawQueryString" />
                  <related func="string.unescape" />
                  <related func="http.normalizePath" />
               </relatedFunctions>
            </func>
            <func name="http.getRequest">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the full HTTP request and headers, but does not include any body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.listHeaderNames" />
                  <related func="http.getHeader" />
                  <related func="http.getBody" />
               </relatedFunctions>
            </func>
            <func name="http.getResponse">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the beginning of the HTTP response (the status line and the headers), up to but not including the empty line that separates the headers from the body. The returned string does not include any body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.listResponseHeaderNames" />
                  <related func="http.getResponseHeader" />
                  <related func="http.getResponseBody" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseBody">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the body of the HTTP response. &lt;br/&gt; If the response has chunked transfer encoding this function will return the de-chunked body. Similarly if the response is gzip or deflate compressed the body will be returned uncompressed. &lt;br/&gt; If the optional 'count' parameter is provided, http.getResponseBody() will read and return the first 'count' bytes of the response. If count is 0, http.getResponseBody() will return the entire response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setResponseBody" />
                  <related func="http.getBody" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseBodyLines">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Splits the body data of the HTTP request into individual lines and returns an array of the data. &lt;br/&gt; If the response has chunked transfer encoding this function will return the de-chunked body. Similarly if the response is gzip or deflate compressed the body will be returned uncompressed. &lt;br/&gt; If the optional 'count' parameter is provided, http.getResponseBodyLines() will read and return the first 'count' bytes of the response. If count is 0, http.getResponseBodyLines() will return the entire response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setResponseBody" />
                  <related func="http.getBodyLines" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseCode">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the status code from the first line of the HTTP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setResponseCode" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseCookie">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of the named cookie in the HTTP response. &lt;br/&gt; http.getResponseCookie() is a helper method to make it easier to parse the HTTP Set-Cookie header and extract the values of that particular cookie, rather than using http.getResponseHeader() directly. &lt;br/&gt; If the cookie does not exist, http.getResponseCookie() will return the empty string. &lt;br/&gt; This function should be called in a response rule; it has no effect in a request rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseCookies" />
                  <related func="http.setResponseCookie" />
                  <related func="http.removeResponseCookie" />
                  <related func="http.getCookie" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseCookies">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing the names of all the cookies being set in this response, mapped to their values. &lt;br/&gt; This function should be called in a response rule; it has no effect in a request rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseCookie" />
                  <related func="http.setResponseCookie" />
                  <related func="http.removeResponseCookie" />
                  <related func="http.getCookies" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of a named HTTP header in the HTTP response, or the empty string if the header does not exist or has an empty value. The header lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setResponseHeader" />
                  <related func="http.addResponseHeader" />
                  <related func="http.removeResponseHeader" />
                  <related func="http.responseHeaderExists" />
                  <related func="http.getHeader" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the response. &lt;br/&gt; The headers are returned as a single string, separated by spaces. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by http.listResponseHeaderNames&lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="http.getResponseHeaders">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing all the header names in the response mapped to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseHeader" />
                  <related func="http.setResponseHeader" />
                  <related func="http.addResponseHeader" />
                  <related func="http.removeResponseHeader" />
                  <related func="http.responseHeaderExists" />
                  <related func="http.getHeaders" />
               </relatedFunctions>
            </func>
            <func name="http.getResponseVersion">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns the version of the HTTP protocol being used. It returns the version string in the first line of the HTTP response, such as 'HTTP/1.1'. It will return the empty string in the case of HTTP/0.9 response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getVersion" />
               </relatedFunctions>
            </func>
            <func name="http.getVersion">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the version of the HTTP protocol being used. It returns the version string in the first line of the HTTP request, such as "HTTP/1.1". It will return the empty string in the case of HTTP/0.9, which does not have a version specifier in the request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseVersion" />
               </relatedFunctions>
            </func>
            <func name="http.headerExists">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Reports if a named header exists or not. It is similar to http.getHeader(), but makes it possible to distinguish between a header not being present and a header having no value. &lt;br/&gt; The lookup is case-insensitive. &lt;br/&gt; It returns 1 if the header exists, and 0 if it does not. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getHeader" />
               </relatedFunctions>
            </func>
            <func name="http.listFormParamNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns an array containing the names of all the form parameters present in the URL query string and, if the request is a POST, in the POST body data. If the same parameter appears multiple times in the request, it will only appear once in the list returned by this function. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getFormParam" />
                  <related func="http.doesFormParamExist" />
               </relatedFunctions>
            </func>
            <func name="http.listHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the request. &lt;br/&gt; The headers are returned as an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getHeader" />
                  <related func="http.removeHeader" />
                  <related func="http.getRequest" />
                  <related func="http.listResponseHeaderNames" />
               </relatedFunctions>
            </func>
            <func name="http.listResponseHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the response. &lt;br/&gt; The headers are returned as an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseHeader" />
                  <related func="http.removeResponseHeader" />
                  <related func="http.getResponse" />
                  <related func="http.listHeaderNames" />
               </relatedFunctions>
            </func>
            <func name="http.normalizePath">
               <parameters min="1" max="1" regex=".">
                  <param name="url" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Flattens a decoded URL path, converting '//' to '/', '/./' to '/', and flattening '/a/../' to '/'. It returns the flattened path string. &lt;br/&gt; If the file system path is invalid, this function returns the empty string. Invalid paths include those that contain disallowed characters like '\0', invalid hex-escapes, or that use '../' sequences to reference a location outside the local root. &lt;br/&gt; This function should be used on the retrieved URL before attempting path matching for access control. Remember to pass in a %-decoded URL path, to prevent disguised paths and control codes from being 'hidden' in the path. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getPath" />
               </relatedFunctions>
            </func>
            <func name="http.redirect">
               <parameters min="1" max="1" regex=".">
                  <param name="address" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Sends back a HTTP 302 redirect response, which will send a web browser to a different URL. This is equivalent to http.sendResponse( "302 Moved Temporarily", "text/html", "", "Location: " . $url ); &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.sendResponse" />
                  <related func="http.changeSite" />
               </relatedFunctions>
            </func>
            <func name="http.removeCookie">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Removes the named cookie from the incoming HTTP request. &lt;br/&gt; http.removeCookie is a helper method that makes it easier to parse the HTTP Cookie header and remove a particular cookie, rather than using http.getHeader() and http.setHeader() directly. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getCookie" />
                  <related func="http.setCookie" />
                  <related func="http.removeResponseCookie" />
               </relatedFunctions>
            </func>
            <func name="http.removeHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes a named header if it exists in the request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getHeader" />
                  <related func="http.addHeader" />
                  <related func="http.setHeader" />
                  <related func="http.removeResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="http.removeResponseCookie">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes a cookie from the HTTP response. &lt;br/&gt; This function should be called in a response rule; it has no effect in a request rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseCookie" />
                  <related func="http.setResponseCookie" />
                  <related func="http.removeCookie" />
               </relatedFunctions>
            </func>
            <func name="http.removeResponseHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes the named HTTP header from the HTTP response. The header lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setResponseHeader" />
                  <related func="http.getResponseHeader" />
                  <related func="http.addResponseHeader" />
                  <related func="http.scrubResponseHeaders" />
                  <related func="http.removeHeader" />
               </relatedFunctions>
            </func>
            <func name="http.responseHeaderExists">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Reports if a named header exists in the HTTP response. It is similar to http.getResponseHeader(), but makes it possible to distinguish between a header not being present and a header having no value. &lt;br/&gt; Header lookups are case-insensitive. &lt;br/&gt; It returns 1 if the header exists, and 0 if it does not. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="http.scrubRequestHeaders">
               <parameters min="1" max="INF" regex=".+">
                  <param name="header1" />
                  <param name="header2" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Limits the allowed HTTP request headers to a known set. The allowed headers can either be passed in as a list or space separated in a single argument. &lt;br/&gt; Care should be taken when using this function to ensure that the headers that are required for connection handling are let through. At the very least, the following should be allowed: &lt;blockquote&gt; &lt;tt&gt;Connection&lt;/tt&gt;, &lt;tt&gt;Content-Length&lt;/tt&gt;, &lt;tt&gt;Transfer-Encoding&lt;/tt&gt;, &lt;tt&gt;Content-Type&lt;/tt&gt;, &lt;tt&gt;Host&lt;/tt&gt; &lt;/blockquote&gt; For a complete list of HTTP headers, refer to RFC2616. Protocols that extend HTTP, such as WebDAV, use other headers. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.removeHeader" />
                  <related func="http.scrubResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="http.scrubResponseHeaders">
               <parameters min="1" max="INF" regex=".+">
                  <param name="header1" />
                  <param name="header2" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Limits the allowed HTTP response headers to a known set. The allowed headers can either be passed in as a list or space separated in a single argument. &lt;br/&gt; Care should be taken when using this function to ensure that the headers that are required for connection handling are let through. At the very least, the following should be allowed: &lt;blockquote&gt; &lt;tt&gt;Connection&lt;/tt&gt;, &lt;tt&gt;Content-Length&lt;/tt&gt;, &lt;tt&gt;Transfer-Encoding&lt;/tt&gt;, &lt;tt&gt;Location&lt;/tt&gt; &lt;/blockquote&gt; For a complete list of HTTP headers, refer to RFC2616. Protocols that extend HTTP, such as WebDAV, use other headers. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.removeResponseHeader" />
                  <related func="http.scrubRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="http.sendResponse">
               <parameters min="4" max="4" regex="....">
                  <param name="code" />
                  <param name="type" />
                  <param name="body" />
                  <param name="headers" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Hands back an HTTP response to the client instead of balancing the request via a pool onto a node. It generates a correct HTTP response from the response code, content type, body data and headers supplied. Multiple headers should be separated with \r\n (note, however, that your traffic manager may override some of these headers, e.g. the 'Connection' header). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.close" />
                  <related func="connection.discard" />
               </relatedFunctions>
            </func>
            <func name="http.setBody">
               <parameters min="1" max="1" regex=".">
                  <param name="body" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sets the request body for this HTTP request to the supplied string, replacing any request body already present. &lt;br/&gt; This also updates the 'Content-Length' header in the request to the length of the new body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getBody" />
                  <related func="http.setResponseBody" />
               </relatedFunctions>
            </func>
            <func name="http.setCookie">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the value of the named cookie in the incoming HTTP request. &lt;br/&gt; http.setCookie is a helper method that makes it easier to parse the HTTP Cookie header and set the value of a particular cookie, rather than using http.getHeader() and http.setHeader() directly. &lt;br/&gt; An HTTP 'Cookie' header can have multiple values, such as &lt;br/&gt; &amp;nbsp;&amp;nbsp;Cookie: user-id=Joe; user-type=gold &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getCookie" />
                  <related func="http.removeCookie" />
                  <related func="http.setResponseCookie" />
               </relatedFunctions>
            </func>
            <func name="http.setHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the value of the named HTTP header. &lt;br/&gt; A case-insensitive lookup is first performed in order to identify any existing headers, replacing the value where a match is found. &lt;br/&gt; Note that the "Connection" header is manipulated by your traffic manager and that changing its value in TrafficScript may not give the expected results. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.addHeader" />
                  <related func="http.getHeader" />
                  <related func="http.headerExists" />
                  <related func="http.removeHeader" />
                  <related func="http.setResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="http.setIdempotent">
               <parameters min="1" max="1" regex=".">
                  <param name="resend" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Marks a request as resendable or non-resendable. &lt;br/&gt; An &lt;i&gt;idempotent&lt;/i&gt; request has no detrimental side effects, so it can safely be submitted multiple times. A simple page retrieval is generally idempotent. A non-idempotent request has a side effect - for example, it may update a database, or initiate a purchase. The HTTP/1.1 specification regards all GET, HEAD, PUT, DELETE, OPTIONS and TRACE requests as idempotent. &lt;br/&gt; Your traffic manager tags these requests as 'resendable'; if the request is submitted to a back-end node and a correct response is not received, your traffic manager will resubmit the request to another back-end node. All other requests, such as POST requests are not resent if a back-end node fails to generate a correct response. &lt;br/&gt; http.setIdempotent() can override this behaviour. If 'resend' has a non-zero value, this indicates that if the request is submitted to a back-end node and a correct response is not received, your traffic manager should resubmit the request to another back-end node. &lt;br/&gt; If 'resend' is zero, this indicates that the request should only be attempted against one back-end node. &lt;br/&gt; Note that a request cannot be resent if it has begun streaming data from the client to the node before it detects the failure. To avoid this, you can read the entire request within the TrafficScript rule, so that it is buffered in its entirety internally in the TrafficManager. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.setIdempotent" />
               </relatedFunctions>
            </func>
            <func name="http.setMethod">
               <parameters min="1" max="1" regex=".">
                  <param name="method" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sets the HTTP method, changing the original request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getMethod" />
               </relatedFunctions>
            </func>
            <func name="http.setPath">
               <parameters min="1" max="1" regex=".">
                  <param name="url" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Replaces the path portion of the request URL with the supplied value. If the replacement value contains a '?', this function will also replace the query string; otherwise, any query string is preserved. Any control characters are %-encoded in the replacement value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getPath" />
               </relatedFunctions>
            </func>
            <func name="http.setQueryString">
               <parameters min="1" max="1" regex=".">
                  <param name="querystring" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Replaces the query-string portion of the request URL with the supplied replacement. Any control characters in the replacement are %-encoded. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getQueryString" />
                  <related func="http.setRawQueryString" />
                  <related func="http.getRawQueryString" />
               </relatedFunctions>
            </func>
            <func name="http.setRawQueryString">
               <parameters min="1" max="1" regex=".">
                  <param name="querystring" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Replaces the query-string portion of the request URL with the supplied replacement. Unlike http.setQueryString, control characters are not encoded. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getRawQueryString" />
                  <related func="http.setQueryString" />
                  <related func="http.getQueryString" />
               </relatedFunctions>
            </func>
            <func name="http.setResponseBody">
               <parameters min="1" max="2" regex="..?">
                  <param name="body" />
                  <param name="transfer-encoding" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sets the response body for this HTTP response to the supplied string, replacing any response body already present. &lt;br/&gt; This also updates the 'Content-Length' header in the response to the length of the new body data. In addition the 'Content-Encoding' header is removed as we only ever set body data which is not encoded or compressed. If the server is still sending the original response body when this function is called, the connection to the server will be harmlessly dropped. &lt;br/&gt; The optional 'transfer-encoding' parameter indicates the encoding of the body data (for example, 'chunked'). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseBody" />
                  <related func="http.setBody" />
               </relatedFunctions>
            </func>
            <func name="http.setResponseCode">
               <parameters min="1" max="2" regex=".|..">
                  <param name="code" />
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sets the status code and message in the first line of the HTTP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseCode" />
               </relatedFunctions>
            </func>
            <func name="http.setResponseCookie">
               <parameters min="2" max="3" regex="..|...">
                  <param name="name" />
                  <param name="value" />
                  <param name="options" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets a cookie in the HTTP response. If the named cookie already exists, this function replaces its value. &lt;br/&gt; The options are a semi-colon separated list of cookie options, such as "domain", "path", "expires" and "secure". &lt;br/&gt; If the named cookie exists and no 'options' are provided, the current options for the named cookie are preserved. &lt;br/&gt; This function may be called from a request rule or a response rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.getResponseCookie" />
                  <related func="http.removeResponseCookie" />
                  <related func="http.setCookie" />
               </relatedFunctions>
            </func>
            <func name="http.setResponseHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets a HTTP header in the HTTP response that will be sent back to the client. If the header already exists in the response, then it will be replaced with this new value. The header lookup is case-insensitive. &lt;br/&gt; Note that this function should not be used with the Connection header, i.e. setResponseHeader("Connection", value) since it may not give the expected results. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.addResponseHeader" />
                  <related func="http.getResponseHeader" />
                  <related func="http.removeResponseHeader" />
                  <related func="http.setHeader" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="http.cache">
         <description>Functions affecting the HTTP cache.</description>
         <functions>
            <func name="http.cache.disable">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Prevents this response from being cached. In a request rule, this additionally prevents a cache lookup for this request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.cache.enable" />
                  <related func="http.cache.setkey" />
               </relatedFunctions>
            </func>
            <func name="http.cache.enable">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Performs the opposite function to http.cache.disable(), and re-enables the default caching behaviour when the dynamic caching option in the virtual server is enabled. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.cache.disable" />
                  <related func="http.cache.setkey" />
               </relatedFunctions>
            </func>
            <func name="http.cache.exists">
               <parameters min="0" max="1" regex=".?">
                  <param name="poolname" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if the current request can (currently) be responded to from the cache, otherwise 0. &lt;br/&gt;Note that even if the request is in the cache at the time of this call, it may be removed from the cache by the time that TrafficScript processing has finished and the traffic manager can send it. If a cached response must be guaranteed, http.cache.respondIfCached() should be used. &lt;br/&gt; A pool name can be provided as optional argument in order to make the lookup use the specified pool. Without this argument, the lookup will use the pool previously selected with pool.select or the virtual server's default pool. &lt;br/&gt; This function always returns 0 if called in a response rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.cache.enable" />
                  <related func="http.cache.disable" />
                  <related func="http.cache.respondIfCached" />
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
            <func name="http.cache.respondIfCached">
               <parameters min="0" max="1" regex=".?">
                  <param name="poolname" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sends a cached response to the client without any further rule processing and without connecting to a back-end server. If no match is found in the cache or if the request does not allow cached responses, rule processing continues normally. If the response can be served from the cache, no statements after this function call will be processed and the client will get the cached page. &lt;br/&gt; A pool name can be provided as optional argument in order to make the lookup use the specified pool. Without this argument, the lookup will use the pool previously selected with pool.select or the virtual server's default pool. &lt;br/&gt; This function does nothing if called in a response rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.cache.enable" />
                  <related func="http.cache.disable" />
                  <related func="http.cache.exists" />
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
            <func name="http.cache.setkey">
               <parameters min="1" max="1" regex=".">
                  <param name="key" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Allows multiple variants of the same URL to be considered distinct objects, even if the standard 'Vary' RFC semantics would consider the pages identical. Cached objects will be stored with this key, and subsequent requests for the same URL will only match if the same key is provided. An example use is to provided different cached content based on a portion of the User-Agent field of the request. Note that successive uses of this function will overwrite the previous use rather than append the new key to it. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.cache.enable" />
                  <related func="http.cache.disable" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="http.compress">
         <description>Functions affecting the HTTP compression of this connection.</description>
         <functions>
            <func name="http.compress.disable">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Stops this HTTP response from being compressed. This function overrides the Virtual Server Content Compression settings, so this is useful for stopping particular MIME types for certain browsers from being compressed. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.compress.enable" />
               </relatedFunctions>
            </func>
            <func name="http.compress.enable">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Allows this individual HTTP response to be compressed. If this function is called for an HTTP response, then the Virtual Server settings for Content Compression are ignored, and the response will be compressed, assuming that the client supports compression. This function return 0 if it successfully enables compression &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.compress.disable" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="http.request">
         <description>Functions that allow you to send HTTP requests within TrafficScript rules.</description>
         <functions>
            <func name="http.request.get">
               <parameters min="1" max="3" regex=".|..|...">
                  <param name="url" />
                  <param name="headers" />
                  <param name="timeout" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Issues an HTTP request for a remote web page and returns the body of the page requested. $1 is set to the HTTP response code (e.g. 200 for OK), or is 0 if there was an error. $2 is set to the Content-Type of the response (or an error message if there was an error). $3 is set to the content-headers of the response, in the format: [&amp;lt;header-line&amp;gt;\r\n]*. $4 is set to the first line of the HTTP response. The entire original response may be reconstructed as $4."\r\n".$3."\r\n".$body, where $body is the result of http.request.get. &lt;br/&gt; HTTPS pages can be requested by using the https:// prefix for the url. &lt;br/&gt; A timeout parameter can be given (in seconds). If the request does not complete in this time, then an error will be given instead. &lt;br/&gt; Requests made with http.request.get() will use keepalive connections to the destination server. Provided the request was completed successfully, these keepalive connections will be re-used by any invocation of http.request.get() or http.request.head() to the same destination host:port, from any rule, in any virtual server. If the request is to a node in a pool, the connection will be shared with other requests your traffic manager makes to the same node. If the request made with http.request.get() was unsuccessful, your traffic manager closes the connection. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.request.head" />
                  <related func="http.request.post" />
               </relatedFunctions>
            </func>
            <func name="http.request.head">
               <parameters min="1" max="3" regex=".|..|...">
                  <param name="url" />
                  <param name="headers" />
                  <param name="timeout" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Issues an HTTP HEAD request for a remote web page. $1 is set to the HTTP response code (e.g. 200 for OK), or is 0 if there was an error. $2 is set to the Content-Type of the response (or an error message if there was an error). $3 is set to the content-headers of the response, in the format: [&amp;lt;header-line&amp;gt;\r\n]*. $4 is set to the first line of the HTTP response. The entire original response may be reconstructed as $4."\r\n".$3."\r\n".$body, where $body is the result of http.request.get. &lt;br/&gt; HTTPS pages can be requested by using the https:// prefix for the url. &lt;br/&gt; A timeout parameter can be given (in seconds). If the request does not complete in this time, then an error will be given instead. &lt;br/&gt; Requests made with http.request.head() will use keepalive connections to the destination server. Provided the request was completed successfully, these keepalive connections will be re-used by any invocation of http.request.head() or http.request.get() to the same destination host:port, from any rule, in any virtual server. If the request is to a node in a pool, the connection will be shared with other requests your traffic manager makes to the same node. If the request made with http.request.head() was unsuccessful, your traffic manager closes the connection. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.request.post" />
               </relatedFunctions>
            </func>
            <func name="http.request.post">
               <parameters min="2" max="4" regex="..|...|....">
                  <param name="url" />
                  <param name="POST data" />
                  <param name="headers" />
                  <param name="timeout" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Issues an HTTP POST request for a remote web page, and returns the body of the page requested. $1 is set to the HTTP response code (e.g. 200 for OK), or is 0 if there was an error. $2 is set to the Content-Type of the response (or an error message if there was an error). $3 is set to the content-headers of the response, in the format: [&amp;lt;header-line&amp;gt;\r\n]*. $4 is set to the first line of the HTTP response. The entire original response may be reconstructed as $4."\r\n".$3."\r\n".$body, where $body is the result of http.request.post. &lt;br/&gt; HTTPS pages can be requested by using the https:// prefix for the url. &lt;br/&gt; A timeout parameter can be given (in seconds). If the request does not complete in this time, then an error will be given instead. &lt;br/&gt; Requests made with http.request.post() will always create a new connection to the destination server and will &lt;i&gt;not&lt;/i&gt; use an existing connection. After a request made with http.request.post() has finished successfully, its connection can be re-used by any invocation of http.request.get() or http.request.head() to the same destination host:port, from any rule, in any virtual server. If the request was to a node in a pool, the connection will also be shared with other requests your traffic manager makes to the same node. If the request made with http.request.post() was unsuccessful, your traffic manager closes the connection. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.request.get" />
                  <related func="http.request.head" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="http.stream">
         <description>Functions for streaming HTTP data.</description>
         <functions>
            <func name="http.stream.continueFromBackend">
               <parameters min="0" max="1" regex=".?">
                  <param name="data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Stops streaming any data from the current rule and lets your traffic manager send remaining data from backend. The 'data' parameter can be used to send the last block to be streamed. Rule processing will finish and no further statements in this or subsequent rules will be executed. Unlike http.stream.finishResponse(), any data coming from the backend server will continue to be sent from the backend to the client normally. &lt;br/&gt; Note that this function will behave exactly like http.stream.finishResponse() if run from a request rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.stream.startResponse" />
                  <related func="http.stream.readBulkResponse" />
                  <related func="http.stream.readResponse" />
                  <related func="http.stream.writeResponse" />
                  <related func="http.stream.finishResponse" />
               </relatedFunctions>
            </func>
            <func name="http.stream.finishResponse">
               <parameters min="0" max="1" regex=".?">
                  <param name="data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Indicates that 'data' is the last block to be streamed for the current transaction. Rule processing will stop after http.stream.finishResponse() has been called, i.e. the remaining statements of the present rule will not be evaluated and no subsequent rules will be run. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.stream.startResponse" />
                  <related func="http.stream.readBulkResponse" />
                  <related func="http.stream.readResponse" />
                  <related func="http.stream.writeResponse" />
                  <related func="http.sendResponse" />
               </relatedFunctions>
            </func>
            <func name="http.stream.readBulkResponse">
               <parameters min="1" max="2" regex="..?">
                  <param name="count" />
                  <param name="delimiter" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Reads (and consumes) data from the server, so that TrafficScript can manipulate the data and send a modified version to the client. &lt;br/&gt; Reads the number of bytes specified by 'count' from the body of the HTTP response supplied by the server. Data from the response is only returned up to and including the &lt;b&gt;last&lt;/b&gt; occurrence of 'delimiter' if a non-empty delimiter has been specified. Unlike http.getResponseBody(), it also removes the data returned from the server's response. When the end of the response from the server has been reached, an empty string is returned. &lt;br/&gt; If the delimiter partially matches at the end of the specified number of bytes, the data returned will include the full delimiter (thus returning slightly more data than specified). If the delimiter is not found in the specified number of bytes, then the specified number of bytes of data will be returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.stream.readResponse" />
                  <related func="http.getResponseBody" />
                  <related func="http.stream.writeResponse" />
                  <related func="http.stream.finishResponse" />
                  <related func="http.stream.startResponse" />
               </relatedFunctions>
            </func>
            <func name="http.stream.readResponse">
               <parameters min="1" max="2" regex="..?">
                  <param name="count" />
                  <param name="delimiter" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Similar to http.stream.readBulkResponse(), but only returns response body data up to and including the &lt;b&gt;first&lt;/b&gt; occurrence of delimiter. The two functions behave identically if no delimiter is provided. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.stream.readBulkResponse" />
                  <related func="http.getResponseBody" />
                  <related func="http.stream.writeResponse" />
                  <related func="http.stream.finishResponse" />
                  <related func="http.stream.startResponse" />
               </relatedFunctions>
            </func>
            <func name="http.stream.startResponse">
               <parameters min="2" max="4" regex="..|...|....">
                  <param name="resp_code" />
                  <param name="content_type" />
                  <param name="content_length" />
                  <param name="headers" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sets up an HTTP response from which data can be streamed later by calling http.stream.writeResponse(). http.stream.startResponse() can only be called once per HTTP transaction. Only 'resp_code' and 'content_type' are mandatory arguments. However, it is recommended to specify the 'content_length' if possible. If it is provided and a valid integer, your traffic manager will not stream more than that number of bytes. A set of headers (separated by "\r\n") can be provided in the optional fourth argument. In a response rule, if no fourth argument is given, the response headers from the back-end will be sent on to the client (note, however, that your traffic manager may override some of these headers, e.g. the 'Connection' header) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.stream.writeResponse" />
                  <related func="http.stream.finishResponse" />
                  <related func="http.stream.readBulkResponse" />
                  <related func="http.stream.readResponse" />
                  <related func="http.sendResponse" />
               </relatedFunctions>
            </func>
            <func name="http.stream.writeResponse">
               <parameters min="1" max="1" regex=".">
                  <param name="data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_HTTP" />
               </restrictions>
               <description>&lt;p&gt; Sends the data in the 'data' argument to the client. http.stream.writeResponse() can be called multiple times but http.stream.startResponse() must have been called beforehand. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.stream.startResponse" />
                  <related func="http.stream.readBulkResponse" />
                  <related func="http.stream.readResponse" />
                  <related func="http.stream.finishResponse" />
                  <related func="http.sendResponse" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="java">
         <description>Functions relating to Java Extensions.</description>
         <functions>
            <func name="java.run">
               <parameters min="1" max="INF" regex=".+">
                  <param name="Java Extension class name" />
                  <param name="options" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
                  <restriction type="ZXTM_JAVA" />
               </restrictions>
               <description>&lt;p&gt; Runs a named Java Extension. The Java Extension class name must be given, and extra options can also be supplied to the Extensions. (These are supplied as the 'args' attribute in the Java Extension API). &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="json">
         <description></description>
         <functions>
            <func name="json.deserialize">
               <parameters min="1" max="1" regex=".">
                  <param name="json_string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Converts the supplied string in JavaScript Object Notation (JSON) into a TrafficScript array or hash variable. If the supplied string is not in the correct format then a warning will be printed and the result will be empty. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="json.serialize" />
               </relatedFunctions>
            </func>
            <func name="json.serialize">
               <parameters min="1" max="1" regex=".">
                  <param name="object" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Converts the supplied array or hash variable into JavaScript Object Notation (JSON). This format is commonly used to exchange data between online applications. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="json.deserialize" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="lang">
         <description>Standard functions, mostly for converting data types.</description>
         <functions>
            <func name="lang.assert">
               <parameters min="2" max="2" regex="..">
                  <param name="condition" />
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; If the condition is false, prints a warning to the log with the current line number and terminates the rule. If the condition is true then no messages will be printed and the rule will continue as normal. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.warn" />
               </relatedFunctions>
            </func>
            <func name="lang.chr">
               <parameters min="1" max="1" regex=".">
                  <param name="number" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts a number to the corresponding ASCII character. chr() may be used as an alias for lang.chr(). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.ord" />
               </relatedFunctions>
            </func>
            <func name="lang.dump">
               <parameters min="1" max="1" regex=".">
                  <param name="variable" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Converts the supplied variable into a human-readable string. This function is useful for printing the contents of arrays and hashes when debugging TrafficScript rules. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="lang.isarray">
               <parameters min="1" max="1" regex=".">
                  <param name="data" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns whether or not the supplied data is an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.ishash" />
               </relatedFunctions>
            </func>
            <func name="lang.ishash">
               <parameters min="1" max="1" regex=".">
                  <param name="data" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns whether or not the supplied data is a hash. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.isarray" />
               </relatedFunctions>
            </func>
            <func name="lang.max">
               <parameters min="2" max="2" regex="..">
                  <param name="param1" />
                  <param name="param2" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the maximum value of the two parameters provided. If both parameters are strings, it uses a string comparison; otherwise, the parameters are promoted to integers or doubles and compared. max() may be used as a shorthand for lang.max(). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.min" />
               </relatedFunctions>
            </func>
            <func name="lang.min">
               <parameters min="2" max="2" regex="..">
                  <param name="param1" />
                  <param name="param2" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the minimum value of the two parameters provided. If both parameters are strings, it uses a string comparison; otherwise, the parameters are promoted to integers or doubles and compared. min() may be used as a shorthand for lang.min(). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.max" />
               </relatedFunctions>
            </func>
            <func name="lang.ord">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts an ascii character to an integer. ord() may be used as a shorthand alias for lang.ord(). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.toString" />
                  <related func="lang.chr" />
               </relatedFunctions>
            </func>
            <func name="lang.toArray">
               <parameters min="0" max="INF" regex=".*">
                  <param name="values" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an array of the supplied values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.toDouble" />
                  <related func="lang.toString" />
                  <related func="lang.toInt" />
               </relatedFunctions>
            </func>
            <func name="lang.toDouble">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the double (floating point) value of its parameter, using the TrafficScript type-casting rules. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.toInt" />
                  <related func="lang.toString" />
               </relatedFunctions>
            </func>
            <func name="lang.toHash">
               <parameters min="0" max="INF" regex=".*">
                  <param name="values" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an hash of the supplied key value pairs. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.toDouble" />
                  <related func="lang.toString" />
                  <related func="lang.toInt" />
                  <related func="lang.toArray" />
               </relatedFunctions>
            </func>
            <func name="lang.toInt">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the integer value of its parameter, using the TrafficScript type-casting rules. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.toDouble" />
                  <related func="lang.toString" />
               </relatedFunctions>
            </func>
            <func name="lang.toString">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the string value of its parameter, using the TrafficScript type-casting rules. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.toInt" />
                  <related func="lang.toDouble" />
                  <related func="lang.chr" />
                  <related func="lang.ord" />
               </relatedFunctions>
            </func>
            <func name="lang.tochar">
               <parameters min="1" max="1" regex=".">
                  <param name="number" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; This function is an alias for lang.chr. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.chr" />
               </relatedFunctions>
            </func>
            <func name="lang.warn">
               <parameters min="1" max="1" regex=".">
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Prints a warning to the log with the line number that this function call appears on. If strict error checking is enabled then the rule will abort. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="lang.assert" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="log">
         <description>Functions for writing to the event log.</description>
         <functions>
            <func name="log.error">
               <parameters min="1" max="1" regex=".">
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Writes an error message to the traffic managers's event log file. This log can be viewed through the UI. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="log.info" />
                  <related func="log.warn" />
                  <related func="event.emit" />
               </relatedFunctions>
            </func>
            <func name="log.info">
               <parameters min="1" max="1" regex=".">
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Writes an informational message to the traffic manager's event log file. This log can be viewed through the UI. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="log.warn" />
                  <related func="log.error" />
                  <related func="event.emit" />
               </relatedFunctions>
            </func>
            <func name="log.warn">
               <parameters min="1" max="1" regex=".">
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Writes a warning message to the traffic manager's event log file. This log can be viewed through the UI. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="log.info" />
                  <related func="log.error" />
                  <related func="event.emit" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="math">
         <description>Mathematical functions for manipulating numbers.</description>
         <functions>
            <func name="math.acos">
               <parameters min="1" max="1" regex=".">
                  <param name="x" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Calculates the arc cosine of x and returns an angle in radians in the range 0 to pi. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.cos" />
               </relatedFunctions>
            </func>
            <func name="math.asin">
               <parameters min="1" max="1" regex=".">
                  <param name="x" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Calculates the arc sine of x and returns an angle in radians in the range -pi/2 to pi/2. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.sin" />
               </relatedFunctions>
            </func>
            <func name="math.atan">
               <parameters min="1" max="1" regex=".">
                  <param name="angle" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Calculates the arc tangent of x and returns an angle in radians in the range -pi/2 to pi/2. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.tan" />
               </relatedFunctions>
            </func>
            <func name="math.ceil">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the smallest integer greater than or equal to its parameter. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.floor" />
                  <related func="math.rint" />
                  <related func="math.fabs" />
               </relatedFunctions>
            </func>
            <func name="math.cos">
               <parameters min="1" max="1" regex=".">
                  <param name="angle" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Interprets its parameter as an angle in radians and returns its cosine. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.sin" />
                  <related func="math.tan" />
               </relatedFunctions>
            </func>
            <func name="math.exp">
               <parameters min="1" max="1" regex=".">
                  <param name="power" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Calculates e raised to the power of its parameter and returns the result. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.ln" />
                  <related func="math.pow" />
               </relatedFunctions>
            </func>
            <func name="math.fabs">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Interprets its parameter as a floating point number and returns its absolute value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.floor" />
                  <related func="math.ceil" />
                  <related func="math.rint" />
               </relatedFunctions>
            </func>
            <func name="math.floor">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the largest integer not greater than its parameter. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.ceil" />
                  <related func="math.rint" />
                  <related func="math.fabs" />
               </relatedFunctions>
            </func>
            <func name="math.ln">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the natural logarithm of its parameter. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.log" />
                  <related func="math.exp" />
               </relatedFunctions>
            </func>
            <func name="math.log">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the base10 logarithm of its parameter. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.ln" />
                  <related func="math.pow" />
               </relatedFunctions>
            </func>
            <func name="math.pow">
               <parameters min="2" max="2" regex="..">
                  <param name="num" />
                  <param name="power" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Raises its first parameter to the power of its second parameter and returns the result. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.ln" />
                  <related func="math.exp" />
                  <related func="math.sqrt" />
               </relatedFunctions>
            </func>
            <func name="math.random">
               <parameters min="1" max="1" regex=".">
                  <param name="range" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns a pseudorandom integer greater than or equal to zero, and less than its parameter. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="math.rint">
               <parameters min="1" max="1" regex=".">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Rounds its parameter by returning the integer closest to its value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.floor" />
                  <related func="math.ceil" />
                  <related func="math.fabs" />
               </relatedFunctions>
            </func>
            <func name="math.sin">
               <parameters min="1" max="1" regex=".">
                  <param name="angle" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Interprets its parameter as an angle in radians and returns its sine. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.cos" />
                  <related func="math.tan" />
               </relatedFunctions>
            </func>
            <func name="math.sqrt">
               <parameters min="1" max="1" regex=".">
                  <param name="num" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the square root of its parameter. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.pow" />
               </relatedFunctions>
            </func>
            <func name="math.tan">
               <parameters min="1" max="1" regex=".">
                  <param name="angle" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Interprets its parameter as an angle in radians and returns its tangent. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="math.sin" />
                  <related func="math.cos" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="net.dns">
         <description>DNS lookup functions.</description>
         <functions>
            <func name="net.dns.resolveHost">
               <parameters min="1" max="1" regex=".">
                  <param name="hostname" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Resolves a hostname into an IPv4 address, using the DNS name servers configured on the local system. If the lookup fails, an empty string is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="net.dns.resolveIP" />
                  <related func="net.dns.resolveHost6" />
               </relatedFunctions>
            </func>
            <func name="net.dns.resolveHost6">
               <parameters min="1" max="1" regex=".">
                  <param name="hostname" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Resolves a hostname into an IPv6 address, using the DNS name servers configured on the local system. If the lookup fails, an empty string is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="net.dns.resolveHost" />
                  <related func="net.dns.resolveIP" />
               </relatedFunctions>
            </func>
            <func name="net.dns.resolveIP">
               <parameters min="1" max="1" regex=".">
                  <param name="IP address" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Resolves an IP address to a hostname, using the DNS name servers configured on the local system. &lt;br/&gt; Returns a hostname, or the IP address if the address cannot be resolved. An empty string is returned if the parameter is not a valid IP address. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="net.dns.resolveHost" />
                  <related func="net.dns.resolveHost6" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="pool">
         <description> Functions that allow you to look up and alter which pool the current request will be assigned to.</description>
         <functions>
            <func name="pool.activenodes">
               <parameters min="1" max="1" regex=".">
                  <param name="Pool" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the number of nodes that are alive in the named pool. This will not include any nodes that have been marked as 'draining'. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="pool.use" />
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
            <func name="pool.checknode">
               <parameters min="3" max="3" regex="...">
                  <param name="Pool" />
                  <param name="Host" />
                  <param name="Port" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Query the pool to determine the status of a node. Will return one of : "NOTINPOOL","NOSUCHPOOL","NOSUCHHOST","DEAD" "ACTIVE","DISABLED","DRAINING" &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="pool.select">
               <parameters min="1" max="3" regex=".|...">
                  <param name="Pool" />
                  <param name="Host" />
                  <param name="Port" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Selects a pool to load-balance this connection with. By default, the pool name should be a literal string (i.e. not dynamically generated and not containing any variables), however, if you enable the "trafficscript!variable_pool_use" global setting variables can be used too. Please refer to the Troubleshooting section of the Stingray TrafficScript Overview and Reference Manual for more information about this setting. Unlike pool.use(), your traffic manager will continue to process further request rules after this function. &lt;br/&gt; If the pool named does not exist, your traffic manager will log a warning message. &lt;br/&gt; Optionally, a specific machine can be specified that will be used to forward the request on to. This machine does not have to be in the pool selected, or in fact in any pool. In this mode, the selected pool is used only for its configuration settings (e.g. timeout values, SSL encryption options, etc.) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="pool.use" />
               </relatedFunctions>
            </func>
            <func name="pool.use">
               <parameters min="1" max="3" regex=".|...">
                  <param name="Pool" />
                  <param name="Host" />
                  <param name="Port" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Selects a pool to load-balance this connection with, and stops processing any more rules. It must only be used in request rules. &lt;br/&gt; By default the pool name should be a literal string, however, if you enable the "trafficscript!variable_pool_use" global setting, variables can be used too. Please refer to the Troubleshooting section of the Stingray TrafficScript Overview and Reference Manual for more information about this setting. &lt;br/&gt; If the pool named does not exist, your traffic manager will log a warning message and use the default pool configured for the virtual server. &lt;br/&gt; Optionally, a specific machine can be specified that will be used to forward the request on to. This machine does not have to be in the pool selected, or in fact in any pool. In this mode, the selected pool is used only for its configuration settings (e.g. timeout values, SSL encryption options, etc.) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="rate">
         <description>Functions that allow you to monitor and assign rate shaping classes.</description>
         <functions>
            <func name="rate.getbacklog">
               <parameters min="1" max="2" regex=".|..">
                  <param name="class_name" />
                  <param name="context" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RATE" />
               </restrictions>
               <description>&lt;p&gt; Returns the number of connections that are currently waiting to be released by the supplied rate class. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rate.use" />
               </relatedFunctions>
            </func>
            <func name="rate.use">
               <parameters min="1" max="2" regex=".|..">
                  <param name="class_name" />
                  <param name="context" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RATE" />
               </restrictions>
               <description>&lt;p&gt; Immediately queues a connection using the named rate class. &lt;br/&gt; The connection and the current TrafficScript rule is stalled until the rate class releases it, according to the rate limits defined in the class. When the connection is released, the rate.use() function returns and the TrafficScript rule continues to execute. &lt;br/&gt; If rate.use() is called with the optional 'context' value, it uses a new rate class which inherits all of the rate settings from the named rate class. All connections called with the same 'context' value use the same new rate class. This allows you to shape connections based on arbitary data, such as a user name or source IP address, shaping connections from different users or source IPs independently. &lt;br/&gt; If the connection has passed through the class successfully then the value 1 is returned. If the connection times out while it is queued, then the TrafficScript rule is abandoned. If the connection could not be queued because an invalid rate class name was provided, rate.use() returns 0. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="rate.use">
         <description>Functions that conditionally activate a rate shaping class.</description>
         <functions>
            <func name="rate.use.noQueue">
               <parameters min="1" max="2" regex=".|..">
                  <param name="class_name" />
                  <param name="context" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RATE" />
               </restrictions>
               <description>&lt;p&gt; Checks if this connection will exceed the rate limits of the named rate class. If connection is within rate limits, a value of 1 is returned and the connection is added to rate usage data. If usage has exceeded rate limits, a value of 0 is returned. If the rate class does not exist, a value of -1 will be returned. &lt;br/&gt; Optionally a context value can be used to check rate limits based on a context, for example, rate limits for a specific client IP address. See rate.use for more details on context. &lt;br/&gt; Unlike rate.use(), this will not queue connections if the rate limit is exceeded. &lt;br/&gt; Note that calling rate.use() after rate.use.noQueue() will mean that the connection is counted twice, halving the allowed rate. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rate.use" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="request">
         <description>Functions that allow you to access information about and modify the current request.</description>
         <functions>
            <func name="request.avoidNode">
               <parameters min="1" max="1" regex=".">
                  <param name="node" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Indicates that the named node should be avoided if at all possible. &lt;br/&gt; When picking a node to use for a request, the traffic manager will not use any nodes that have been named by request.avoidNode() unless session persistence mandates it, or unless there are no other nodes available. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.retry" />
                  <related func="request.getRetries" />
                  <related func="connection.getNode" />
               </relatedFunctions>
            </func>
            <func name="request.endsAt">
               <parameters min="1" max="1" regex=".">
                  <param name="offset" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
                  <restriction type="ZXTM_NOTSTREAM" />
               </restrictions>
               <description>&lt;p&gt; Marks the end of the current request. Any more data read in from the network is not handled until the next request has started to be handled. &lt;br/&gt; This function is useful to synchronise requests and responses. An example of its use would be for a line-oriented protocol such as POP3, where you wish to process each command. &lt;br/&gt; It returns the entire request. &lt;br/&gt; This function allows you to program layer-7 intelligence to correctly parse and manage generic TCP protocols. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.endsWith" />
               </relatedFunctions>
            </func>
            <func name="request.endsWith">
               <parameters min="1" max="1" regex=".">
                  <param name="regex" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
                  <restriction type="ZXTM_NOTSTREAM" />
               </restrictions>
               <description>&lt;p&gt; Marks the end of the current request. Any more data read in from the network is not handled until the next request has started to be handled. &lt;br/&gt; This function is useful to synchronise requests and responses. An example of its use would be for a line-oriented protocol such as POP3, where you wish to process each command. &lt;br/&gt; It returns the entire request. &lt;br/&gt; This function allows you to program layer-7 intelligence to correctly parse and manage generic TCP protocols. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.endsAt" />
               </relatedFunctions>
            </func>
            <func name="request.get">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the first 'count' bytes of data provided by the client in the current request. If no count parameter is provided, all data read so far is returned, which may be none unless request.get() has previously been called with a positive count. If you cannot determine how much data to read, use request.getLine or request.endsWith instead. &lt;br/&gt; Warning: you can stall a connection by asking it to read more data than the remote client will provide. Combine this with request.getLength() or request.getLine() to reliably read data from a connection. For HTTP, you are required to use the HTTP specific functions like http.getBody() to read the request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getLength" />
                  <related func="request.getLine" />
                  <related func="request.endsWith" />
                  <related func="request.set" />
                  <related func="response.get" />
               </relatedFunctions>
            </func>
            <func name="request.getBandwidthClass">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_BW" />
               </restrictions>
               <description>&lt;p&gt; Returns the current bandwidth class for the connection to the backend node, or an empty string if no class is set. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.setBandwidthClass" />
                  <related func="response.setBandwidthClass" />
                  <related func="response.getBandwidthClass" />
               </relatedFunctions>
            </func>
            <func name="request.getDestIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the original IP address that the client attempted to connect to. This will be the same as request.getLocalIP() unless the connection was redirected via firewall rules (e.g. using iptables on Linux) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getDestPort" />
                  <related func="request.getRemoteIP" />
                  <related func="request.getRemotePort" />
               </relatedFunctions>
            </func>
            <func name="request.getDestPort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the original network port number that the client attempted to connect to. This will be the same as request.getLocalPort() unless the connection was redirected via firewall rules (e.g. using iptables on Linux) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getDestIP" />
                  <related func="request.getRemotePort" />
                  <related func="request.getRemoteIP" />
               </relatedFunctions>
            </func>
            <func name="request.getLength">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the number of bytes of data already received from the client. This can be combined with request.get() to reliably read data from a connection without stalling if no data is available. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.get" />
                  <related func="response.getLength" />
               </relatedFunctions>
            </func>
            <func name="request.getLine">
               <parameters min="0" max="2" regex=".?.?">
                  <param name="regex" />
                  <param name="offset" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
                  <restriction type="ZXTM_NOTSTREAM" />
               </restrictions>
               <description>&lt;p&gt; Returns a line of request data provided by the client. The line is terminated by the supplied regular expression, or by '\n'. If 'offset' is provided, request.getLine() returns the data from that offset to the terminating expression. The terminating expression is included in the returned string. &lt;br/&gt; When request.getline() returns, the variable $1 is updated to point to the start of the next line in the datastream. &lt;br/&gt; You can iterate through the lines of request data by using $1 as the iterator variable. &lt;br/&gt; To prevent excessive data usage, if the line ending is not found within trafficscript!memory_warning bytes (configurable on the Global Settings page), then that many bytes will be returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.get" />
                  <related func="response.getLine" />
               </relatedFunctions>
            </func>
            <func name="request.getLocalIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the IP address that the client connected to, i.e. the address local to this machine. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getLocalPort" />
                  <related func="request.getDestIP" />
                  <related func="request.getRemoteIP" />
                  <related func="request.getRemotePort" />
                  <related func="response.getLocalIP" />
                  <related func="response.getLocalPort" />
                  <related func="response.getRemoteIP" />
                  <related func="response.getRemotePort" />
               </relatedFunctions>
            </func>
            <func name="request.getLocalPort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the network port number that the client connected to. (e.g. port 80 is normal for a web server) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getLocalIP" />
                  <related func="request.getRemotePort" />
                  <related func="request.getDestPort" />
                  <related func="request.getRemoteIP" />
                  <related func="response.getLocalPort" />
                  <related func="response.getLocalIP" />
                  <related func="response.getRemotePort" />
                  <related func="response.getRemoteIP" />
               </relatedFunctions>
            </func>
            <func name="request.getLogEnabled">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if logging is enabled for this request, and 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.setLogEnabled" />
               </relatedFunctions>
            </func>
            <func name="request.getRemoteIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the remote IP address of the client. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getRemotePort" />
                  <related func="request.getLocalIP" />
                  <related func="request.setRemoteIP" />
                  <related func="request.getLocalPort" />
                  <related func="response.getRemoteIP" />
                  <related func="response.getRemotePort" />
                  <related func="response.getLocalIP" />
                  <related func="response.getLocalPort" />
               </relatedFunctions>
            </func>
            <func name="request.getRemotePort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
                  <restriction type="ZXTM_CR" />
               </restrictions>
               <description>&lt;p&gt; Returns the remote network port of the client's connection. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getRemoteIP" />
                  <related func="request.getLocalPort" />
                  <related func="request.getLocalIP" />
                  <related func="response.getRemotePort" />
                  <related func="response.getRemoteIP" />
                  <related func="response.getLocalPort" />
                  <related func="response.getLocalIP" />
               </relatedFunctions>
            </func>
            <func name="request.getRetries">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the number of times that this request has been explicitly retried by request.retry(). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.retry" />
                  <related func="request.isResendable" />
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
            <func name="request.getToS">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the Type of Service (ToS) of traffic going to the server. The return value is either "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE". &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getToS" />
                  <related func="request.setToS" />
               </relatedFunctions>
            </func>
            <func name="request.isResendable">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Test if it is possible to resend this request to a different node. It is only possible to resend a request if the entire request has been buffered up in the traffic manager, for example, by explicitly reading it in a request rule. &lt;br/&gt; If the request was streamed through to the client, for example, as a large HTTP POST, it will not have been buffered and therefore cannot be resent. &lt;br/&gt; Note that request.isResendable detects if it is possible to resend a request; request.setIdempotent can be used to tell the traffic manager not to automatically resend a request if it fails. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.retry" />
                  <related func="request.getRetries" />
                  <related func="request.setIdempotent" />
               </relatedFunctions>
            </func>
            <func name="request.retry">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Retry the request (using the currently selected pool). Load-balancing and session persistence decisions are recalculated, and the request is resubmitted - possibly to the same node as previously, although request.avoidNode() can prevent this. &lt;br/&gt; If request.retry() is called, any request rules are not run again. When a new response is collected after request.retry(), the response rules are run again. &lt;br/&gt; The response rule can modify the request in before resubmitting it. &lt;br/&gt; It is only generally possible to resend a request if the entire request was read before the request rules completed. Otherwise, request data will have been streamed to the server and not cached. Use request.isResendable() to test for this. &lt;br/&gt; request.getRetries() returns the number of times this request has already been tried. &lt;br/&gt; On success, request.retry() does not return, but the response rules will be run again on the new response. On failure, request.retry() returns 0. request.retry() will do nothing if used in a request rule. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.isResendable" />
                  <related func="request.getRetries" />
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
            <func name="request.sendResponse">
               <parameters min="1" max="1" regex=".">
                  <param name="Data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
               </restrictions>
               <description>&lt;p&gt; Writes the provided data directly back to the client. &lt;br/&gt; Any data that has been read is discarded, and nothing is forwarded to the back-end node. Once the response data has been written, control returns to the next request. &lt;br/&gt; If you are managing HTTP traffic the http.sendResponse() function should be used instead. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.discard" />
                  <related func="http.sendResponse" />
                  <related func="response.set" />
                  <related func="response.append" />
                  <related func="connection.close" />
               </relatedFunctions>
            </func>
            <func name="request.set">
               <parameters min="1" max="1" regex=".">
                  <param name="request data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
               </restrictions>
               <description>&lt;p&gt; Replaces the input data read from the client with the provided string. &lt;br/&gt; This is a low-level routine that should be used with care. For protocols with their own higher-level protocol managers (e.g. HTTP), use the higher level routines to alter the input data (e.g. http.setHeader() and http.setBody()). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.get" />
                  <related func="response.set" />
               </relatedFunctions>
            </func>
            <func name="request.setBandwidthClass">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_BW" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the bandwidth class for the current connection to the backend node. Providing an empty class name removes the bandwidth class from the connection. It returns zero if an error occurs (for example, if the bandwidth class does not exist), and 1 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getBandwidthClass" />
                  <related func="response.setBandwidthClass" />
                  <related func="response.getBandwidthClass" />
               </relatedFunctions>
            </func>
            <func name="request.setIdempotent">
               <parameters min="1" max="1" regex=".">
                  <param name="resend" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Marks a request as resendable or non-resendable. &lt;br/&gt; An &lt;i&gt;idempotent&lt;/i&gt; request has no detrimental side effects, so it can safely be attempted multiple times. A non-idempotent request has a side effect - for example, it may update a database, or initiate a purchase. &lt;br/&gt; By default, all non-HTTP requests are marked as idempotent. If a back-end node fails to generate a correct response when a request is initially forwarded to it, an attempt will be made to resend the request to another node. &lt;br/&gt; request.setIdempotent() can override this behaviour. If 'resend' is zero, this indicates that the request should only be attempted against one back-end node. &lt;br/&gt; If 'resend' has a non-zero value, this indicates that if a request is made to a back-end node and a correct response is not received, the request should be retried against another back-end node. &lt;br/&gt; Note that a request cannot be resent once it has begun streaming data between the client and the node. Additionally, UDP connections cannot be marked as resendable (the UDP client application should handle failed UDP responses). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="http.setIdempotent" />
               </relatedFunctions>
            </func>
            <func name="request.setLogEnabled">
               <parameters min="1" max="1" regex=".">
                  <param name="enabled" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Enables or disables logging for the current request. Note that if logging for the current virtual server is disabled, then this function cannot currently enable it. &lt;br/&gt; Returns 1 if logging is now enabled, and 0 if it is now disabled. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getLogEnabled" />
               </relatedFunctions>
            </func>
            <func name="request.setRemoteIP">
               <parameters min="1" max="1" regex=".">
                  <param name="ipAddr" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sets the remote IP address of the client. This function should be used with care, as it will alter what is logged in request logs and the address seen by a back-end node in 'transparent' mode. 0 is returned if the IP address is invalid, and 1 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getRemoteIP" />
               </relatedFunctions>
            </func>
            <func name="request.setToS">
               <parameters min="1" max="1" regex=".">
                  <param name="Type of Service" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sets the Type of Service (ToS) flags of traffic going to the server. Valid options are "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE". ToS flags may be used by network equipment to change how they route network traffic. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.setToS" />
                  <related func="request.getToS" />
               </relatedFunctions>
            </func>
            <func name="request.skip">
               <parameters min="1" max="1" regex=".">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
               </restrictions>
               <description>&lt;p&gt; Removes the specified number of bytes from the start of the request provided by the client. This can be used in combination with request.get() and request.getLine() to stream data from a client, or to alter a request before passing it on to a server. &lt;br/&gt; Successive calls to this function will remove further data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getLength" />
                  <related func="request.getLine" />
                  <related func="request.set" />
                  <related func="request.get" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="resource">
         <description>Functions that allow you to access files uploaded to the 'Extra Files' section of the traffic manager.</description>
         <functions>
            <func name="resource.exists">
               <parameters min="1" max="1" regex=".">
                  <param name="filename" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Checks whether or not the named file exists in &lt;i&gt;ZEUSHOME&lt;/i&gt;/zxtm/conf/extra/. If it exists 1 is returned, 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="resource.get" />
                  <related func="resource.getMD5" />
               </relatedFunctions>
            </func>
            <func name="resource.get">
               <parameters min="1" max="1" regex=".">
                  <param name="filename" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the contents of a named file stored in the &lt;i&gt;ZEUSHOME&lt;/i&gt;/zxtm/conf/extra/ directory. If the file doesn't exist, then an empty string is returned. Note that subdirectories of conf/extra are not supported. &lt;br/&gt; Resources are pre-loaded into memory, so this call does not cause the file to be reloaded. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="resource.getLines">
               <parameters min="1" max="1" regex=".">
                  <param name="filename" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the contents of a named file stored in the &lt;i&gt;ZEUSHOME&lt;/i&gt;/zxtm/conf/extra/ directory as an array. If the file doesn't exist, then an empty array is returned. Note that subdirectories of conf/extra are not supported. &lt;br/&gt; Resources are pre-loaded into memory, so this call does not cause the file to be reloaded. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="resource.getMD5">
               <parameters min="1" max="1" regex=".">
                  <param name="filename" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the MD5 of the current contents of the file in &lt;i&gt;ZEUSHOME&lt;/i&gt;/zxtm/conf/extra/. If the file doesn't exist, an empty string is returned. &lt;br/&gt; File MD5s are cached to speed up this call. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="resource.exists" />
                  <related func="resource.get" />
               </relatedFunctions>
            </func>
            <func name="resource.getMTime">
               <parameters min="1" max="1" regex=".">
                  <param name="filename" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the time that the named file in &lt;i&gt;ZEUSHOME&lt;/i&gt;/zxtm/conf/extra/ was last modified, in seconds since the epoch (i.e. UNIX time). If the file doesn't exist, 0 is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="resource.exists" />
                  <related func="resource.get" />
                  <related func="resource.getMD5" />
                  <related func="sys.timeToString" />
                  <related func="sys.time" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="response">
         <description>Functions that allow you to access information about and modify the current response.</description>
         <functions>
            <func name="response.append">
               <parameters min="1" max="1" regex=".">
                  <param name="response data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_NOTGLB" />
               </restrictions>
               <description>&lt;p&gt; Appends the provided string to the response data. &lt;br/&gt; This is a low-level routine that should be used with care. For protocols with their own higher-level protocol managers (e.g. HTTP), you must use the higher level routines to alter the input data (e.g. http.setResponseHeader() and http.setResponseBody()). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.set" />
               </relatedFunctions>
            </func>
            <func name="response.close">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Immediately closes the connection to the back-end node. Any response data that has already been read from the server will be forwarded to the client, but no more response data will be read. &lt;br/&gt; Your traffic manager will reconnect to a back-end node when it next needs to forward request data to it; the back-end node is specified by either calling pool.use() or pool.select() in a request rule, or by the default pool. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="connection.close" />
                  <related func="connection.discard" />
                  <related func="pool.use" />
                  <related func="pool.select" />
               </relatedFunctions>
            </func>
            <func name="response.flush">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
                  <restriction type="ZXTM_GENERIC" />
               </restrictions>
               <description>&lt;p&gt; Transfers the first count bytes of the response back to the client. These bytes are removed from the underlying response buffer. If count is not specified, all current response data is flushed. &lt;br/&gt; This function is useful in generic client- and server-first protocols, to synchronise responses with the next request. This may be necessary if your traffic manager is likely to respond directly to some requests, and the back-end node responds to others. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.get" />
                  <related func="response.getLine" />
               </relatedFunctions>
            </func>
            <func name="response.get">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the first 'count' bytes of data provided by the server in the current response. If you do not supply a count parameter, then the entire response will be read in. &lt;br/&gt; Warning: you can stall a connection by asking it to read more data than the back-end server will provide. Combine this with response.getLength() or response.getLine() to reliably read data from a connection. For HTTP, you must use the HTTP specific functions like http.getResponseBody() to read the response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getLength" />
                  <related func="response.getLine" />
                  <related func="response.set" />
                  <related func="request.get" />
               </relatedFunctions>
            </func>
            <func name="response.getBandwidthClass">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_BW" />
               </restrictions>
               <description>&lt;p&gt; Returns the current bandwidth class for the connection to the client, or an empty string if no class is set. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.setBandwidthClass" />
                  <related func="request.setBandwidthClass" />
                  <related func="request.getBandwidthClass" />
               </relatedFunctions>
            </func>
            <func name="response.getLength">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the amount of data already received from the server. This can be combined with response.get() to reliably read data from a connection without stalling if no data is available. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.get" />
                  <related func="request.getLength" />
               </relatedFunctions>
            </func>
            <func name="response.getLine">
               <parameters min="0" max="2" regex=".?.?">
                  <param name="regex" />
                  <param name="offset" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a line of response data provided by the server. The line is terminated by the supplied regular expression, or by '\n'. If 'offset' is provided, response.getLine() returns the data from that offset to the terminating expression. &lt;br/&gt; When response.getLine() returns, the variable $1 is updated to point to the start of the next line in the datastream. &lt;br/&gt; You can iterate through the lines of response data by using $1 as the iterator variable. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.get" />
                  <related func="request.getLine" />
               </relatedFunctions>
            </func>
            <func name="response.getLocalIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the local IP address of the connection to the node in use, i.e. an IP address on the local machine that your traffic manager connected from. It returns the empty string if no connection exists. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getLocalPort" />
                  <related func="response.getRemoteIP" />
                  <related func="response.getRemotePort" />
                  <related func="request.getLocalIP" />
                  <related func="request.getLocalPort" />
                  <related func="request.getRemoteIP" />
                  <related func="request.getRemotePort" />
               </relatedFunctions>
            </func>
            <func name="response.getLocalPort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the local port of the connection to the node in use, i.e. the port number on the local machine that the traffic manager connected from. It returns 0 if there is no current connection to a node. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getLocalIP" />
                  <related func="response.getRemotePort" />
                  <related func="response.getRemoteIP" />
                  <related func="request.getLocalPort" />
                  <related func="request.getLocalIP" />
                  <related func="request.getRemotePort" />
                  <related func="request.getRemoteIP" />
               </relatedFunctions>
            </func>
            <func name="response.getRemoteIP">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the remote IP address of the node used. If there is no current connection, it will return an empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getRemotePort" />
                  <related func="response.getLocalIP" />
                  <related func="response.getLocalPort" />
                  <related func="request.getRemoteIP" />
                  <related func="request.getRemotePort" />
                  <related func="request.getLocalIP" />
                  <related func="request.getLocalPort" />
               </relatedFunctions>
            </func>
            <func name="response.getRemotePort">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the network port number on which the traffic manager connected to a node. (e.g. port 80 is normal for a web server). If there is no current connection, it will return 0. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getRemoteIP" />
                  <related func="response.getLocalPort" />
                  <related func="response.getLocalIP" />
                  <related func="request.getRemotePort" />
                  <related func="request.getRemoteIP" />
                  <related func="request.getLocalPort" />
                  <related func="request.getLocalIP" />
               </relatedFunctions>
            </func>
            <func name="response.getToS">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the Type of Service (ToS) of traffic going to the client. The return value is either "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE". &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.getToS" />
                  <related func="response.setToS" />
               </relatedFunctions>
            </func>
            <func name="response.set">
               <parameters min="1" max="1" regex=".">
                  <param name="response data" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
                  <restriction type="ZXTM_GENERIC" />
                  <restriction type="ZXTM_NOTGLB" />
               </restrictions>
               <description>&lt;p&gt; Sets the server response to the provided string. &lt;br/&gt; This is a low-level routine that should be used with care. For protocols with their own higher-level protocol managers (e.g. HTTP), you must use the higher level routines to alter the input data (e.g. http.setResponseHeader() and http.setResponseBody()). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.sendResponse" />
                  <related func="response.append" />
                  <related func="response.get" />
                  <related func="request.set" />
               </relatedFunctions>
            </func>
            <func name="response.setBandwidthClass">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_BW" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the bandwidth class for the current connection to the client. Providing an empty class name removes the bandwidth class from the connection. It returns zero if an error occurs (for example, if the bandwidth class does not exist), and 1 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="response.getBandwidthClass" />
                  <related func="request.getBandwidthClass" />
                  <related func="request.setBandwidthClass" />
               </relatedFunctions>
            </func>
            <func name="response.setToS">
               <parameters min="1" max="1" regex=".">
                  <param name="Type of Service" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Sets the Type of Service (ToS) flags of traffic going to the client. Valid options are "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE". ToS flags may be used by network equipment to change how they route network traffic. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="request.setToS" />
                  <related func="response.getToS" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="rtsp">
         <description>RTSP protocol-specific functions.</description>
         <functions>
            <func name="rtsp.addRequestHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Adds an RTSP header. If the header already exists, via a case-insensitive lookup, this value will be appended to the existing value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setRequestHeader" />
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.removeRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="rtsp.addResponseHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Adds an RTSP header to the RTSP response that will be sent back to the client. If the header already exists in the response, via a case-insensitive lookup, this value will be appended to the existing value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setResponseHeader" />
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.removeResponseHeader" />
                  <related func="rtsp.addRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getMethod">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the RTSP method that was used to make the request, such as SETUP or PLAY. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setMethod" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getPath">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the %-decoded path in the RTSP request URL &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setPath" />
                  <related func="rtsp.getRawURL" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getRawURL">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the raw URL data provided by the client in the first line of the RTSP request, after the method and before the RTSP version specifier. No %-decoding is performed on the URL. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getPath" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getRequest">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Returns the full RTSP request and headers, but does not include any body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.listRequestHeaderNames" />
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.getRequestBody" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getRequestBody">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the body data of the request. &lt;br/&gt; If the optional 'count' parameter is supplied, rtsp.getRequestBody() will only read and return this number of bytes. If count is 0, rtsp.getRequestBody() returns the entire request. &lt;br/&gt; If the request has no body, then this returns an empty string. This function is not useable in response rules, as the body data of the request will no longer be accessible. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseBody" />
                  <related func="rtsp.setRequestBody" />
                  <related func="rtsp.getRequestBodyLines" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getRequestBodyLines">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Splits the body data of the RTSP request into individual lines and returns an array of the data. &lt;br/&gt; If the request has no body, then this returns an empty array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getRequestBody" />
                  <related func="rtsp.getResponseBodyLines" />
                  <related func="rtsp.setRequestBody" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getRequestHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of a named RTSP header in the RTSP request, or the empty string if the header does not exist. The header name lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setRequestHeader" />
                  <related func="rtsp.addRequestHeader" />
                  <related func="rtsp.removeRequestHeader" />
                  <related func="rtsp.getRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getRequestHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the request. &lt;br/&gt; The headers are returned as a single string, separated by spaces. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by rtsp.listRequestHeaderNames&lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="rtsp.getRequestHeaders">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing all the header names in the request mapped to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.setRequestHeader" />
                  <related func="rtsp.addRequestHeader" />
                  <related func="rtsp.removeRequestHeader" />
                  <related func="rtsp.requestHeaderExists" />
                  <related func="rtsp.getResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponse">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Returns the full RTSP response and headers, but does not include any body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.listResponseHeaderNames" />
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.getResponseBody" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponseBody">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the body of the RTSP response. This could be an SDP response. &lt;br/&gt; If the optional 'count' parameter is provided, rtsp.getResponseBody() will read and return the first 'count' bytes of the response. If count is 0, rtsp.getResponseBody() will return the entire response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getRequestBody" />
                  <related func="rtsp.setResponseBody" />
                  <related func="rtsp.getResponseBodyLines" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponseBodyLines">
               <parameters min="0" max="1" regex=".?">
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Splits the body data of the RTSP request into individual lines and returns an array of the data. &lt;br/&gt; If the request has no body, then this returns an empty array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseBody" />
                  <related func="rtsp.getRequestBodyLines" />
                  <related func="rtsp.setResponseBody" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponseCode">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the status code from the first line of the RTSP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setResponseCode" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponseHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of a RTSP header in the RTSP response, or the empty string if the header does not exist. The header name lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setResponseHeader" />
                  <related func="rtsp.addResponseHeader" />
                  <related func="rtsp.removeResponseHeader" />
                  <related func="rtsp.responseHeaderExists" />
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.getResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponseHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the response. &lt;br/&gt; The headers are returned as a single string, separated by spaces. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by rtsp.listResponseHeaderNames&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.removeResponseHeader" />
                  <related func="rtsp.getRequestHeaderNames" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getResponseHeaders">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing all the header names in the response mapped to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.setResponseHeader" />
                  <related func="rtsp.addResponseHeader" />
                  <related func="rtsp.removeResponseHeader" />
                  <related func="rtsp.responseHeaderExists" />
                  <related func="rtsp.getRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="rtsp.getVersion">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the version of the RTSP protocol being used. It returns the version string in the RTSP/version specifier in the first line of the RTSP request, such as 'RTSP/1.0'. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="rtsp.listRequestHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the request. &lt;br/&gt; The headers are returned as a an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.listResponseHeaderNames" />
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.getRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="rtsp.listResponseHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the response. &lt;br/&gt; The headers are returned as an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.removeResponseHeader" />
                  <related func="rtsp.getResponseHeaders" />
                  <related func="rtsp.listRequestHeaderNames" />
               </relatedFunctions>
            </func>
            <func name="rtsp.redirect">
               <parameters min="1" max="1" regex=".">
                  <param name="path" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sends back an RTSP 302 redirect response, which will send the client to a different URL. This is equivalent to rtsp.sendResponse( "302 Moved Temporarily", "", "Location: " . $url ); &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.sendResponse" />
               </relatedFunctions>
            </func>
            <func name="rtsp.removeRequestHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes an RTSP header if it exists in the request. The header name lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setRequestHeader" />
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.addRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="rtsp.removeResponseHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes a RTSP header from the RTSP response. The header name is automatically translated to the correct case. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.setResponseHeader" />
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.addResponseHeader" />
                  <related func="rtsp.removeRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="rtsp.requestHeaderExists">
               <parameters min="1" max="1" regex=".">
                  <param name="names" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Reports if a header exists or not. It is similar to rtsp.getRequestHeader(), but makes it possible to distinguish between a header not being present and a header having no value. &lt;br/&gt; The header name lookup is case-insensitive. &lt;br/&gt; It returns 1 if the header exists, and 0 if it does not. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="rtsp.responseHeaderExists">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Reports if a named header exists in the RTSP response. It is similar to rtsp.getResponseHeader(), but makes it possible to distinguish between a header not being present and a header having no value. &lt;br/&gt; The header name lookup is case-insensitive. &lt;br/&gt; It returns 1 if the header exists, and 0 if it does not. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="rtsp.sendResponse">
               <parameters min="3" max="3" regex="...">
                  <param name="code" />
                  <param name="body" />
                  <param name="headers" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sends back an RTSP response to the client instead of balancing the request via a pool onto a node. It generates a correct RTSP response from the response code, body data and headers supplied. Multiple headers should be separated with \r\n. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="rtsp.setMethod">
               <parameters min="1" max="1" regex=".">
                  <param name="method" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the RTSP method to use when forwarding the request via a pool to a node. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getMethod" />
               </relatedFunctions>
            </func>
            <func name="rtsp.setPath">
               <parameters min="1" max="1" regex=".">
                  <param name="url" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Replaces the Path portion of the request URL with the supplied value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getPath" />
               </relatedFunctions>
            </func>
            <func name="rtsp.setRequestBody">
               <parameters min="1" max="1" regex=".">
                  <param name="body" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Sets the request body for this RTSP request, replacing any request body already present. &lt;br/&gt; This also updates the 'Content-Length' header in the request to the length of the new body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getRequestBody" />
                  <related func="rtsp.setResponseBody" />
               </relatedFunctions>
            </func>
            <func name="rtsp.setRequestHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the value of a RTSP header, replacing any existing value if the header already exists. &lt;br/&gt; Note that this function should not be used with the Connection header, i.e. setRequestHeader("Connection", value) since it may not give the expected results. &lt;br/&gt; The header name lookup is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getRequestHeader" />
                  <related func="rtsp.addRequestHeader" />
                  <related func="rtsp.removeRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="rtsp.setResponseBody">
               <parameters min="1" max="1" regex=".">
                  <param name="body" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
               </restrictions>
               <description>&lt;p&gt; Sets the response body for this RTSP response, replacing any response body already present. &lt;br/&gt; This also updates the 'Content-Length' header in the response to the length of the new body data. If the server is still sending the original response body when this function is called, the connection to the server will be harmlessly dropped. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseBody" />
                  <related func="rtsp.setRequestBody" />
               </relatedFunctions>
            </func>
            <func name="rtsp.setResponseCode">
               <parameters min="1" max="2" regex=".|..">
                  <param name="code" />
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the status code and message in the first line of the RTSP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.getResponseCode" />
               </relatedFunctions>
            </func>
            <func name="rtsp.setResponseHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_RTSP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets a RTSP header in the RTSP response that will be sent back to the client. If the header already exists in the response, via a case-insensitive lookup, it will be replaced with this new value. &lt;br/&gt; Note that this function should not be used with the Connection header, i.e. setResponseHeader("Connection", value) since it may not give the expected results. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="rtsp.addResponseHeader" />
                  <related func="rtsp.getResponseHeader" />
                  <related func="rtsp.removeResponseHeader" />
                  <related func="rtsp.setRequestHeader" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="rule">
         <description>Functions relating to this rule.</description>
         <functions>
            <func name="rule.getName">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the name of the currently executing rule. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="rule.getState">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns the state of the currently executing rule, either "REQUEST", "RESPONSE" or "GLBRESPONSE". &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="sip">
         <description>SIP protocol-specific functions.</description>
         <functions>
            <func name="sip.addRequestHeader">
               <parameters min="3" max="3" regex="...">
                  <param name="name" />
                  <param name="value" />
                  <param name="at_top" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Modifies the current SIP request, adding a SIP header with the supplied value. If the header already exists, then this value will be appended to the existing value. If at_top is set then the value will be prepended to the header. The header name lookup is case-insensitive. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setRequestHeader" />
                  <related func="sip.getRequestHeader" />
                  <related func="sip.removeRequestHeader" />
                  <related func="sip.requestHeaderExists" />
               </relatedFunctions>
            </func>
            <func name="sip.addResponseHeader">
               <parameters min="3" max="3" regex="...">
                  <param name="name" />
                  <param name="value" />
                  <param name="at_top" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Adds a header to the SIP response that will be sent back to the client. If the header already exists in the response, via a case-insensitive lookup, then this value will be appended to the existing value. If at_top is set then the value will be prepended to the existing value. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setResponseHeader" />
                  <related func="sip.getResponseHeader" />
                  <related func="sip.removeResponseHeader" />
                  <related func="sip.addRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.getMethod">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the SIP method that was used to make the request, such as INVITE or REGISTER. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setMethod" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequest">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Returns the full SIP request and headers, but does not include any body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.listRequestHeaderNames" />
                  <related func="sip.getRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequestBody">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the data contained in the body of the request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setRequestBody" />
                  <related func="sip.getResponseBody" />
                  <related func="sip.getRequestBodyLines" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequestBodyLines">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Splits the body data of the SIP request into individual lines and returns an array of the data. &lt;br/&gt; If the request has no body, then this returns an empty array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestBody" />
                  <related func="sip.getResponseBodyLines" />
                  <related func="sip.setRequestBody" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequestHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the named SIP header in the SIP request, or the empty string if the header does not exist. The header name lookup is case-insensitive. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setRequestHeader" />
                  <related func="sip.addRequestHeader" />
                  <related func="sip.removeRequestHeader" />
                  <related func="sip.requestHeaderExists" />
                  <related func="sip.getRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequestHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the request. &lt;br/&gt; The headers are returned as a single string, separated by spaces. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by sip.listRequestHeaderNames&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.listRequestHeaderNames" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequestHeaders">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing all the header names in the request mapped to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestHeader" />
                  <related func="sip.setRequestHeader" />
                  <related func="sip.addRequestHeader" />
                  <related func="sip.removeRequestHeader" />
                  <related func="sip.requestHeaderExists" />
                  <related func="sip.getResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.getRequestURI">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the target of the SIP request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setRequestURI" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponse">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Returns the full SIP response and headers, but does not include any body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.listResponseHeaderNames" />
                  <related func="sip.getResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponseBody">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the session description of the SIP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setResponseBody" />
                  <related func="sip.getRequestBody" />
                  <related func="sip.getResponseBodyLines" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponseBodyLines">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Splits the body data of the SIP response into individual lines and returns an array of the data. &lt;br/&gt; If the response has no body, then this returns an empty array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseBody" />
                  <related func="sip.setResponseBody" />
                  <related func="sip.getRequestBodyLines" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponseCode">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the status code from the first line of the SIP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setResponseCode" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponseHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the value of a header in the SIP response, or the empty string if the header does not exist. The header name lookup is case-insensitive. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setResponseHeader" />
                  <related func="sip.addResponseHeader" />
                  <related func="sip.removeResponseHeader" />
                  <related func="sip.responseHeaderExists" />
                  <related func="sip.getRequestHeader" />
                  <related func="sip.getResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponseHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the response. &lt;br/&gt; The headers are returned as a single string, separated by spaces. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by sip.listResponseHeaderNames&lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseHeader" />
                  <related func="sip.removeResponseHeader" />
                  <related func="sip.getRequestHeaderNames" />
                  <related func="sip.getResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.getResponseHeaders">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hash containing all the header names in the response mapped to their values. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseHeader" />
                  <related func="sip.setResponseHeader" />
                  <related func="sip.addResponseHeader" />
                  <related func="sip.removeResponseHeader" />
                  <related func="sip.responseHeaderExists" />
                  <related func="sip.getRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.getVersion">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Returns the version of the SIP protocol being used. It returns the version string in the SIP/version specifier in the first line of the SIP request, such as 'SIP/2.0'. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="sip.listRequestHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the request. &lt;br/&gt; The headers are returned as an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestHeader" />
                  <related func="sip.removeRequestHeader" />
                  <related func="sip.getRequest" />
                  <related func="sip.listResponseHeaderNames" />
                  <related func="sip.getRequestHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.listResponseHeaderNames">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Returns a list of all the headers that are present in the response. &lt;br/&gt; The headers are returned as an array. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseHeader" />
                  <related func="sip.removeResponseHeader" />
                  <related func="sip.listRequestHeaderNames" />
                  <related func="sip.getResponseHeaders" />
               </relatedFunctions>
            </func>
            <func name="sip.redirect">
               <parameters min="1" max="1" regex=".">
                  <param name="contact" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sends back a 302 Moved Temporarily response. This response instructs the client to retry the request at the new address(es) given in the 'contact' parameter. This is equivalent to sip.sendResponse( "302", "Moved Temporarily", "Contact: " . $uri, "" ); &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.sendResponse" />
               </relatedFunctions>
            </func>
            <func name="sip.removeRequestHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes a header if it exists in the request. The header name lookup is case-insensitive. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestHeader" />
                  <related func="sip.addRequestHeader" />
                  <related func="sip.setRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.removeResponseHeader">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Removes a header from the SIP response. &lt;br/&gt; The header name lookup is case-insensitive. You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.setResponseHeader" />
                  <related func="sip.getResponseHeader" />
                  <related func="sip.addResponseHeader" />
                  <related func="sip.removeRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.requestHeaderExists">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Reports if a named header exists or not. It is similar to sip.getRequestHeader(), but makes it possible to distinguish between a header not being present and a header having no value. &lt;br/&gt; The header name lookup is case-insensitive. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;br/&gt; It returns 1 if the header exists, and 0 if it does not. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.responseHeaderExists">
               <parameters min="1" max="1" regex=".">
                  <param name="name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Reports if a named header exists in the SIP response. It is similar to sip.getResponseHeader(), but makes it possible to distinguish between a header not being present and a header having no value. &lt;br/&gt; The header name lookup is case-insensitive. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;br/&gt; It returns 1 if the header exists, and 0 if it does not. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.sendResponse">
               <parameters min="2" max="4" regex="..|...|....">
                  <param name="code" />
                  <param name="reason" />
                  <param name="headers" />
                  <param name="body" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sends back a SIP response to the client instead of balancing the request via a pool onto a node. The Statue-Line of the response has the form: SIP/2.0 code reason Via, Record-Route, From, To, CSeq, Call-ID and Content-Length headers are automatically added to the response. Any headers supplied in the headers parameter will also be added to the response. Multiple headers must be separated by \r\n. Any body data specified is appended to the response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.redirect" />
               </relatedFunctions>
            </func>
            <func name="sip.setMethod">
               <parameters min="1" max="1" regex=".">
                  <param name="method" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Sets the SIP method to use when forwarding the request via a pool to a node. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getMethod" />
               </relatedFunctions>
            </func>
            <func name="sip.setRequestBody">
               <parameters min="1" max="1" regex=".">
                  <param name="body" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Sets the request body for this SIP request to the supplied string, replacing any request body already present. &lt;br/&gt; This also updates the 'Content-Length' header in the request to the length of the new body data. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestBody" />
               </relatedFunctions>
            </func>
            <func name="sip.setRequestHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets a SIP header, replacing any existing value if the header already exists. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.addRequestHeader" />
                  <related func="sip.getRequestHeader" />
                  <related func="sip.requestHeaderExists" />
                  <related func="sip.removeRequestHeader" />
               </relatedFunctions>
            </func>
            <func name="sip.setRequestURI">
               <parameters min="1" max="1" regex=".">
                  <param name="uri" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets the target of the SIP request. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getRequestURI" />
               </relatedFunctions>
            </func>
            <func name="sip.setResponseBody">
               <parameters min="1" max="1" regex=".">
                  <param name="body" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Sets the response body for this SIP response, replacing any response body already present. &lt;br/&gt; This also updates the 'Content-Length' header in the response to the length of the new body data. If the server is still sending the original response body when this function is called, the connection to the server will be harmlessly dropped. &lt;br/&gt; &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseBody" />
                  <related func="sip.setRequestBody" />
               </relatedFunctions>
            </func>
            <func name="sip.setResponseCode">
               <parameters min="1" max="2" regex=".|..">
                  <param name="code" />
                  <param name="message" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
               </restrictions>
               <description>&lt;p&gt; Sets the status code and message in the first line of the SIP response. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.getResponseCode" />
               </relatedFunctions>
            </func>
            <func name="sip.setResponseHeader">
               <parameters min="2" max="2" regex="..">
                  <param name="name" />
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SIP" />
                  <restriction type="ZXTM_RB" />
               </restrictions>
               <description>&lt;p&gt; Sets a header in the SIP response that will be sent back to the client. If the header already exists in the response, via a case-insensitive lookup, then it will be replaced with this new value. &lt;br/&gt; You can specify the long or short form of the header name, so 'Via' and 'v' will both match the Via header field. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sip.addResponseHeader" />
                  <related func="sip.getResponseHeader" />
                  <related func="sip.removeResponseHeader" />
                  <related func="sip.setRequestHeader" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="slm">
         <description>Functions for accessing information from the Service Level Monitoring class assigned to this connection.</description>
         <functions>
            <func name="slm.conforming">
               <parameters min="0" max="1" regex=".?">
                  <param name="class name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SLM" />
               </restrictions>
               <description>&lt;p&gt; Returns the current percentage of requests that are meeting the Service Level Monitoring objectives. If no class name is provided, it will use the SLM class currently associated with this connection; if no SLM class is associated with this connection, it returns 100. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="slm.threshold" />
                  <related func="slm.isOK" />
               </relatedFunctions>
            </func>
            <func name="slm.isOK">
               <parameters min="0" max="1" regex=".?">
                  <param name="class_name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SLM" />
               </restrictions>
               <description>&lt;p&gt; Returns whether a particular Service Level Monitoring class is meeting its objectives. If no class name is provided, it will use the SLM class currently associated with this connection; if no SLM class is associated with the connection, it returns 1. This function is a convenience shorthand for 'slm.conforming() &gt; slm.threshold()'. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="slm.conforming" />
                  <related func="slm.threshold" />
               </relatedFunctions>
            </func>
            <func name="slm.threshold">
               <parameters min="0" max="1" regex=".?">
                  <param name="class_name" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_SLM" />
               </restrictions>
               <description>&lt;p&gt; returns the value of the serious_threshold setting in the given SLM class. If no class name is provided, it will use the SLM class currently associated with this connection; if no SLM class is associated with the connection, it returns 0. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="slm.conforming" />
                  <related func="slm.isOK" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="ssl">
         <description>Functions relating to the encryption applied to the current connection.</description>
         <functions>
            <func name="ssl.clientCert">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the PEM encoded client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertAlgorithm">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; If the connection is SSL-encrypted and the client has supplied a valid certificate, then this returns either 'rsaEncryption', 'md2withRSAEncryption', 'md5withRSAEncryption', 'sha1withRSAEncryption' or 'RSA', depending on the certificate's encryption and hash algorithms. Otherwise, it returns the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertChain">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the PEM encoded client certificate chain, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.clientCert" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertCommonName">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the common name of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertEndDate">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; If the connection is SSL-encrypted and the client has supplied a valid certificate, then this returns the date when the certificate is no longer valid. The date is an integer, representing seconds since the epoch. &lt;br/&gt; Otherwise, this function returns 0. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.clientCertStartDate" />
                  <related func="sys.timeToString" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertHash">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a hex-encoded MD5 hash of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertIssuer">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a string representing the issuer of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertPublicKey">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a string representation of the public key of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertSerial">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the serial (in hex) of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.clientCertSerialDec" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertSerialDec">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the serial (in decimal) of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.clientCertSerial" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertStartDate">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; If the connection is SSL-encrypted and the client has supplied a valid certificate, then this returns the date when the certificate became valid. The date is an integer, representing seconds since the epoch. &lt;br/&gt; Otherwise, this function returns 0. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.clientCertEndDate" />
                  <related func="sys.timeToString" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertStatus">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns 'OK' if the client certificate is valid, or 'NoClientCert' if it was missing or not valid. It returns the empty string if the connection was not SSL-encrypted. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertSubject">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a string representing the subject of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCertVersion">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns "1", "2" or "3" denoting the version of the client certificate, or the empty string if the connection was not SSL-encrypted or if a certificate was not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientCipher">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the cipher used by the client to SSL-encrypt the connection. It returns an empty string if the connection was not SSL-encrypted. &lt;br/&gt; The string returned contains the cipher algorithm, SSL version and effective cipher strength, such as: &lt;br/&gt; &lt;br/&gt; &amp;nbsp;&amp;nbsp;SSL_RSA_WITH_RC4_128_SHA, version=SSLv3, bits=128 &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.clientSupportsSecureRenegotiation">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns true if the client is RFC 5746 compliant, else false. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.requireCert" />
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.getClientCloseAlert">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Check whether your traffic manager will send the SSL client an SSL close alert prior to terminating the TCP connection. The function will return a value of 1 if close alerts are enabled, and 0 if they are disabled. The function will return -1 if the client-side connection is not established, or is not an SSL connection. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.setClientCloseAlert" />
                  <related func="ssl.setServerCloseAlert" />
                  <related func="ssl.getServerCloseAlert" />
               </relatedFunctions>
            </func>
            <func name="ssl.getServerCloseAlert">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Check whether your traffic manager will send the SSL server an SSL close alert prior to terminating the TCP connection. The function will return a value of 1 if close alerts are enabled, and 0 if they are disabled. The function will return -1 if the connection is not an SSL connection, or if the server-side connection is not yet established (i.e. it should typically only be used in response rules.) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.setServerCloseAlert" />
                  <related func="ssl.setClientCloseAlert" />
                  <related func="ssl.getClientCloseAlert" />
               </relatedFunctions>
            </func>
            <func name="ssl.getTLSServerName">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the hostname provided by the client using the TLS 1.0 'server_name' extension. If this connection is not using SSL decryption or the client did use the extension then this function returns the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.setTLSServerName" />
               </relatedFunctions>
            </func>
            <func name="ssl.isSSL">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if this connection from the remote client was SSL encrypted and your traffic manager has decrypted the traffic. Otherwise, it returns 0. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="ssl.requireCert">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Initiates an SSL renegotiation with the client, requiring a certificate. If the client fails to provide a valid cert, the connection is closed with an SSL alert of type handshake_failure. Otherwise, rule processing continues after the re-handshake is complete. If the client had already provided a certificate, this function does nothing and rule processing continues. If the underlying connection is not SSL, the transaction is aborted (i.e., this is interpreted as a failed re-handshake). Note that using this function overrides the setting ssl!ssl3_allow_rehandshake. It is strongly recommended to check for client-side support of RFC 5746 before using it, see ssl.clientSupportsSecureRenegotiation. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.clientSupportsSecureRenegotiation" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCert">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a PEM encoded version of the entire certificate being used by your traffic manager for this connection. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertAlgorithm">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a description of the algorithms being used by the virtual server's current certificate. This will either be "rsaEncryption", "md2withRSAEncryption", "md5withRSAEncryption", "sha1withRSAEncryption" or "RSA". If this virtual server is not using SSL decryption (or the algorithm type is not recognised) then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertCommonName">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the common name of the certificate being used by your traffic manager for this connection. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertEndDate">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the date that the certificate being used by your traffic manager for this connection became valid. The date is an integer, representing the number of seconds since the epoch. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.serverCertStartDate" />
                  <related func="sys.time" />
                  <related func="sys.timeToString" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertHash">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the hex-encoded MD5 hash of the certificate being used by your traffic manager for this connection. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertIssuer">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a string with the issuer data of the certificate being used by your traffic manager for this connection (each field is separated by commas). If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.serverCertSubject" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertName">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the name of the certificate being used by the virtual server for this connection. This is the name used to identify the certificate in the UI. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertPublicKey">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns information about the public key of the certificate being used by your traffic manager for this connection. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertSerial">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns a string with the serial number (in hex) of the certificate being used by your traffic manager for this connection. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertStartDate">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the date the certificate being used by your traffic manager for this connection became valid. The date is an integer, representing the number of seconds since the epoch. If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.serverCertEndDate" />
                  <related func="sys.time" />
                  <related func="sys.timeToString" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertSubject">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the subject data of the certificate being used by your traffic manager for this connection (each field is separated by commas). If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.serverCertIssuer" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverCertVersion">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the version of the certificate being used by your traffic manager for this connection (either "1", "2" or "3"). If this virtual server is not using SSL decryption then this function will return the empty string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.serverSiteName">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the hostname or IP address that was used to select the current server certificate. If the default certificate was used, or the current connection is not encrypted, the empty string is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
            <func name="ssl.setClientCloseAlert">
               <parameters min="1" max="1" regex=".">
                  <param name="alertflag" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Sets whether your traffic manager will send the SSL client an SSL close alert prior to terminating the TCP connection. An value of 0 will disable close alerts, a non-zero value will enable close alerts. This setting also applies to related connections, such as data transfer channels related to FTP command channels. If the connection with the client is not an SSL connection then calling this function will do nothing. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.getClientCloseAlert" />
                  <related func="ssl.setServerCloseAlert" />
                  <related func="ssl.getServerCloseAlert" />
               </relatedFunctions>
            </func>
            <func name="ssl.setServerCloseAlert">
               <parameters min="1" max="1" regex=".">
                  <param name="alertflag" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Sets whether your traffic manager will send the SSL server an SSL close alert prior to terminating the TCP connection. A value of 0 will disable close alerts, a non-zero value will enable close alerts. This setting also applies to related connections, such as data transfer channels related to FTP command channels. Note that this function will only work on SSL connections and the server side connection must be established (i.e. it should typically only be used in response rules.) &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.getServerCloseAlert" />
                  <related func="ssl.setClientCloseAlert" />
                  <related func="ssl.getClientCloseAlert" />
               </relatedFunctions>
            </func>
            <func name="ssl.setTLSServerName">
               <parameters min="1" max="1" regex=".">
                  <param name="servername" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Instructs your traffic manager to use the specified hostname when using the TLS 1.0 server_name extension. This method only works if the back end pool has SSL encryption and the server_name option enabled. Using the empty string as this function's parameter will make your traffic manager use the hostname of the node that it is connecting to. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
                  <related func="ssl.getTLSServerName" />
               </relatedFunctions>
            </func>
            <func name="ssl.sslSessionID">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="ZXTM_TCP" />
               </restrictions>
               <description>&lt;p&gt; Returns the session ID of the current SSL connection as a hex-encoded string. If the connection was not SSL-encrypted then an empty string is returned.&lt;br/&gt; This function can also be used with SSL pass-through traffic. When used in a request rule the traffic manager will look for a session ID provided in the ClientHello. Clients provide session IDs only if they are trying to resume a previously used SSL session. If the client did not provide a session ID, this function will return an empty string. &lt;br/&gt; When used in a response rule with SSL pass-through traffic, this function will return the session ID provided in the ServerHello. This might be the same as the session ID sent by the client If the client attempted to resume the session, but this is not guaranteed. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="ssl.isSSL" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="string">
         <description>Functions for manipulating and encoding strings.</description>
         <functions>
            <func name="string.BERToInt">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts a BER compressed integer into an integer. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.intToBER" />
                  <related func="string.bytesToInt" />
               </relatedFunctions>
            </func>
            <func name="string.Ireplace">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="search" />
                  <param name="replacement" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Replaces the first occurrence of the search string in the supplied string with the replacement. It is case-insensitive and returns the string with the replacement. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by string.replaceI&lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.IreplaceAll">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="search" />
                  <param name="replacement" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Replaces all occurrences of the search string in the supplied string with the replacement. It is case-insensitive and returns the string with the replacements. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by string.replaceAllI&lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.append">
               <parameters min="1" max="INF" regex=".+">
                  <param name="str1" />
                  <param name="str2" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the result of concatenating all of its inputs together as strings. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.base64decode">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Decodes a base64-encoded string and returns the result. &lt;br/&gt; Base64 encoding is used for MIME-encoded messages, and in the HTTP Basic Authorization header. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.base64encode" />
                  <related func="string.hexdecode" />
                  <related func="string.unescape" />
               </relatedFunctions>
            </func>
            <func name="string.base64encode">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the base64-encoded version of the provided string. This converts each group of three characters into a 4-character string containing just [A-Za-z0-9+/], and '=' for padding. &lt;br/&gt; Base64 encoding is used for MIME-encoded messages, and in the HTTP Basic Authorization header. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.base64decode" />
                  <related func="string.hexencode" />
                  <related func="string.escape" />
               </relatedFunctions>
            </func>
            <func name="string.bytesToDotted">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts a network ordered byte string into an IP address. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.dottedToBytes" />
                  <related func="string.bytesToInt" />
               </relatedFunctions>
            </func>
            <func name="string.bytesToInt">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts a byte string in network order to an integer. The byte string should be either 1, 2 or 4 bytes long. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.intToBytes" />
                  <related func="string.bytesToDotted" />
                  <related func="string.BERToInt" />
               </relatedFunctions>
            </func>
            <func name="string.cmp">
               <parameters min="2" max="2" regex="..">
                  <param name="str1" />
                  <param name="str2" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Compares its two parameters as strings in a case-sensitive manner. It returns a negative value if str1 is less than str2; zero if they are equal, and a positive value if str1 is greater than str2. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.icmp" />
               </relatedFunctions>
            </func>
            <func name="string.contains">
               <parameters min="2" max="2" regex="..">
                  <param name="haystack" />
                  <param name="needle" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Searches for the provided string (the needle) in the given source (the haystack). &lt;br/&gt; It returns 1 if the 'needle' was found, or 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.containsI" />
                  <related func="string.find" />
                  <related func="string.findr" />
                  <related func="string.startsWith" />
                  <related func="string.endsWith" />
               </relatedFunctions>
            </func>
            <func name="string.containsI">
               <parameters min="2" max="2" regex="..">
                  <param name="haystack" />
                  <param name="needle" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Searches for the provided string (the needle) in the given source (the haystack). It is case-insensitive. &lt;br/&gt; It returns 1 if the 'needle' was found, or 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.contains" />
                  <related func="string.findI" />
                  <related func="string.startsWithI" />
                  <related func="string.endsWithI" />
               </relatedFunctions>
            </func>
            <func name="string.count">
               <parameters min="2" max="3" regex="..|...">
                  <param name="haystack" />
                  <param name="needle" />
                  <param name="start" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Searches from the start of a string, counting the number of times that the provided search string (the needle) is found inside the given string (the haystack). An optional parameter can specify the start position for the search. &lt;br/&gt; It returns the number of times that the string is found. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.find" />
                  <related func="string.contains" />
               </relatedFunctions>
            </func>
            <func name="string.decrypt">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="passphrase" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the decrypted version of a string that has previously been encrypted using string.encrypt(). The passphrase supplied must match that given to string.encrypt(), otherwise the decoding will fail. &lt;br/&gt; An empty string is returned if the decrypt or the integrity check fails. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.encrypt" />
               </relatedFunctions>
            </func>
            <func name="string.dottedToBytes">
               <parameters min="1" max="1" regex=".">
                  <param name="IP address" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts an IP address to a network order byte string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.bytesToDotted" />
                  <related func="string.intToBytes" />
               </relatedFunctions>
            </func>
            <func name="string.drop">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns all but the last 'count' characters from the end of the provided string. An empty string will be returned if 'count' is greater than the length of the original string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.skip" />
                  <related func="string.trim" />
               </relatedFunctions>
            </func>
            <func name="string.encrypt">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="passphrase" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Encrypts a string using the provided pass phrase. The returned string is encrypted using the AES block cipher, using an expanded form of the passphrase as the cipher key. A MAC is also added to ensure the integrity of the string. &lt;br/&gt; This is open to replay attacks, and as such, should not be used to encrypt sensitive data, such as credit card details. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.decrypt" />
               </relatedFunctions>
            </func>
            <func name="string.endsWith">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="suffix" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if the provided string ends with the given suffix, and 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.endsWithI" />
                  <related func="string.startsWith" />
                  <related func="string.contains" />
               </relatedFunctions>
            </func>
            <func name="string.endsWithI">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="suffix" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if the provided string ends with the given suffix, and 0 otherwise. It is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.endsWith" />
                  <related func="string.startsWithI" />
                  <related func="string.containsI" />
               </relatedFunctions>
            </func>
            <func name="string.escape">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns a percent-encoded version of its parameter. &lt;br/&gt; Control characters and spaces (character value &amp;lt;= 32) and '%' characters are each replaced by a '%' symbol, followed by their 2-digit hex value. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.unescape" />
                  <related func="string.hexencode" />
                  <related func="string.regexescape" />
                  <related func="string.urlencode" />
               </relatedFunctions>
            </func>
            <func name="string.extractHost">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the host part of the supplied address if it is a valid IP or hostname. Otherwise the empty string is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.extractPort" />
               </relatedFunctions>
            </func>
            <func name="string.extractPort">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the port part of the supplied address if both the host and port of the supplied address are valid. Otherwise the empty string is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.extractHost" />
               </relatedFunctions>
            </func>
            <func name="string.find">
               <parameters min="2" max="3" regex="..|...">
                  <param name="haystack" />
                  <param name="needle" />
                  <param name="start" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Reports whether the provided search string (the needle) is contained inside the given string (the haystack). An optional parameter can specify the start position for the search. &lt;br/&gt; It returns the location of the first instance of the search string; note that character positions start at 0. &lt;br/&gt; If it could not find the search string, it returns -1. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.findI" />
                  <related func="string.findr" />
                  <related func="string.contains" />
               </relatedFunctions>
            </func>
            <func name="string.findI">
               <parameters min="2" max="3" regex="..|...">
                  <param name="haystack" />
                  <param name="needle" />
                  <param name="start" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Reports whether the provided search string (the needle) is contained inside the given string (the haystack). An optional parameter can specify the start position for the search. It is case-insensitive. &lt;br/&gt; It returns the location of the first instance of the search string; note that character positions start at 0. &lt;br/&gt; If it could not find the search string, it returns -1. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.find" />
                  <related func="string.containsI" />
               </relatedFunctions>
            </func>
            <func name="string.findr">
               <parameters min="2" max="3" regex="..|...">
                  <param name="haystack" />
                  <param name="needle" />
                  <param name="distanceFromEndToStart" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Searches backwards from the end of a string, determining whether the provided search string (the needle) is contained inside the given string (the haystack). An optional parameter can specify the start position for the search, measured from the end of the string (so setting it to 1 skips the last character in the string). &lt;br/&gt; It returns the location of the last instance of the search string; note that character positions start at 0. &lt;br/&gt; If it could not find the search string, it returns -1. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.find" />
                  <related func="string.contains" />
               </relatedFunctions>
            </func>
            <func name="string.hash">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns a number representing a hash of the provided string. The returned value should not be relied on to be consistent across different releases of the software. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.hashMD5">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the MD5 hash of the provided string. The returned string will be 16 bytes long, and may contain non-printable characters. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexencode" />
                  <related func="string.hashSHA1" />
                  <related func="string.hashSHA256" />
                  <related func="string.hashSHA384" />
                  <related func="string.hashSHA512" />
               </relatedFunctions>
            </func>
            <func name="string.hashSHA1">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the SHA1 hash of the provided string. The returned string will be 20 bytes long, and may contain non-printable characters. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexencode" />
                  <related func="string.hashMD5" />
                  <related func="string.hashSHA256" />
                  <related func="string.hashSHA384" />
                  <related func="string.hashSHA512" />
               </relatedFunctions>
            </func>
            <func name="string.hashSHA256">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the SHA-256 hash of the provided string. The returned string will be 32 bytes long, and may contain non-printable characters. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexencode" />
                  <related func="string.hashMD5" />
                  <related func="string.hashSHA1" />
                  <related func="string.hashSHA384" />
                  <related func="string.hashSHA512" />
               </relatedFunctions>
            </func>
            <func name="string.hashSHA384">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the SHA-384 hash of the provided string. The returned string will be 48 bytes long, and may contain non-printable characters. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexencode" />
                  <related func="string.hashMD5" />
                  <related func="string.hashSHA1" />
                  <related func="string.hashSHA256" />
                  <related func="string.hashSHA512" />
               </relatedFunctions>
            </func>
            <func name="string.hashSHA512">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the SHA-512 hash of the provided string. The returned string will be 64 bytes long, and may contain non-printable characters. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexencode" />
                  <related func="string.hashMD5" />
                  <related func="string.hashSHA1" />
                  <related func="string.hashSHA256" />
                  <related func="string.hashSHA384" />
               </relatedFunctions>
            </func>
            <func name="string.hexToInt">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Converts a hexadecimal number to an integer. Returns the first valid hexadecimal value found in the string, or 0. A prefix of "0x" is accepted, but not required. Negative numbers are also valid. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.intToHex" />
               </relatedFunctions>
            </func>
            <func name="string.hexdecode">
               <parameters min="1" max="1" regex=".">
                  <param name="encoded string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the hex-decoded version of the provided string. This interprets each character pair as a 2-digit hex value, replacing it with the corresponding 8-bit character. It does not verify that the original string was correctly encoded. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexencode" />
                  <related func="string.base64decode" />
                  <related func="string.unescape" />
               </relatedFunctions>
            </func>
            <func name="string.hexencode">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the hex-encoded version of the provided string . This converts each character into a two-character hex representation, doubling the length of the string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexdecode" />
                  <related func="string.base64encode" />
                  <related func="string.escape" />
               </relatedFunctions>
            </func>
            <func name="string.htmldecode">
               <parameters min="1" max="1" regex=".">
                  <param name="encodedstring" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returned the HTML-decoded version of a string, converting symbols such as &amp;amp;lt; and &amp;amp;quot; &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.htmlencode" />
               </relatedFunctions>
            </func>
            <func name="string.htmlencode">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the encoded version of the supplied string to make it safe for including in HTML. It converts '&amp;lt;' to &amp;amp;lt;, '&amp;gt;' to &amp;amp;gt;, '&amp;quot;' to &amp;amp;quot; and '&amp;amp;' to &amp;amp;amp;. Control characters are hex-encoded. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.htmldecode" />
                  <related func="string.urlencode" />
               </relatedFunctions>
            </func>
            <func name="string.icmp">
               <parameters min="2" max="2" regex="..">
                  <param name="str1" />
                  <param name="str2" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Compares its two parameters as strings in a case-insensitive manner. It returns a negative value if str1 is less than str2; zero if they are equal, and a positive value if str1 is greater than str2. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.cmp" />
               </relatedFunctions>
            </func>
            <func name="string.insertBytes">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="insertion" />
                  <param name="offset" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Inserts a string into another string at the supplied offset, and returns the resulting string. If offset &amp;lt; 0, or offset &amp;gt; length( string ), the original string is returned unchanged. If offset == 0 the insertion string is prepended; if offset == length( string ) the insertion string is appended. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.replaceBytes" />
               </relatedFunctions>
            </func>
            <func name="string.intToBER">
               <parameters min="1" max="1" regex=".">
                  <param name="number" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts an integer into a BER compressed integer (which is a variable-length binary string encoding). &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.BERToInt" />
                  <related func="string.intToBytes" />
               </relatedFunctions>
            </func>
            <func name="string.intToBytes">
               <parameters min="1" max="2" regex=".|..">
                  <param name="number" />
                  <param name="width" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts an integer to a network order byte string of the specified width. Only widths of 1, 2 and 4 are permitted, and the width defaults to 4 if it is not supplied. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.bytesToInt" />
                  <related func="string.bytesToDotted" />
                  <related func="string.intToBER" />
               </relatedFunctions>
            </func>
            <func name="string.intToHex">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Converts an integer into a hexadecimal string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.hexToInt" />
               </relatedFunctions>
            </func>
            <func name="string.ipmaskmatch">
               <parameters min="2" max="2" regex="..">
                  <param name="IP Address" />
                  <param name="CIDR IP Subnet" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if the provided IP address is contained in the CIDR IP Subnet, and 0 otherwise. &lt;br/&gt; It interprets its first parameter as a string containing an IP address, and its second parameter as an CIDR IP subnet. CIDR IP subnets can be of the form "10.0.1.0/24", "10.0.1.0/255.255.255.0", "10.0.1." or "10.0.1.1". &lt;br/&gt; For IPv6, the standard notation of "2001:200:0:8002::/64" is supported. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.validIPAddress" />
               </relatedFunctions>
            </func>
            <func name="string.left">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the first 'count' characters of the provided string. An empty string will be returned if 'count' is less than or equal to zero. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.skip" />
               </relatedFunctions>
            </func>
            <func name="string.len">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Interprets its parameter as a string and returns its length (in bytes). &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.length">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; This function is an alias for string.len. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.len" />
               </relatedFunctions>
            </func>
            <func name="string.lowercase">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts all characters in the provided string to lowercase and returns the result. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.uppercase" />
               </relatedFunctions>
            </func>
            <func name="string.normalizeIPAddress">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns a unique string representation of an IP address: all leading zeros are removed, and for IPv6 addresses the first occurrence of blocks consisting entirely of zeros is replaced by "::". This normal form can be used to compare IP addresses without ambiguity and is also the form used by TrafficScript functions returning IP addresses. If the string is not a valid IP address, the empty string is returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.validIPAddress" />
               </relatedFunctions>
            </func>
            <func name="string.randomBytes">
               <parameters min="1" max="1" regex=".">
                  <param name="length" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns a string of the supplied length filled with random bytes. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.regexescape">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns a version of its parameter suitable for using inside a regex match as a string literal. &lt;br/&gt; All characters in the string that aren't a-z, A-Z, 0-9 or '_' are escaped using a backslash. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.escape" />
               </relatedFunctions>
            </func>
            <func name="string.regexmatch">
               <parameters min="2" max="3" regex="...?">
                  <param name="string" />
                  <param name="regex" />
                  <param name="flags" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Performs a regular expression match on the supplied string. If the regular expression 'regex' contains bracketed sub-expressions, then the variables $1 ... $9 will be set to the matching substrings. &lt;br/&gt; Note that the '\' character is an escape character in TrafficScript strings enclosed with double quotation marks. If you need to put a literal '\' in a regular expression, you must escape it as '\\' or enclose the string in single quotation marks. To match a literal string inside a regular expression use the string.regexEscape function. &lt;br/&gt; The optional 'flags' parameter contains a string of single-letter options. The following options are supported: &lt;ul&gt; &lt;li&gt;'i', meaning 'case insensitive' - letters in the pattern match both upper and lower case letters.&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; It returns 1 if matched, and 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.wildmatch" />
                  <related func="string.regexsub" />
                  <related func="string.regexescape" />
               </relatedFunctions>
            </func>
            <func name="string.regexsub">
               <parameters min="3" max="4" regex="...|....">
                  <param name="string" />
                  <param name="regex" />
                  <param name="replacement" />
                  <param name="flags" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Performs a regular expression match on the supplied string, then replaces each matching substring with the supplied replacement. The replacement string may contain $1 .. $9 substitutions, which reference bracketed sub-expressions in the regular expression. &lt;br/&gt; Note that the '\' character is an escape character in TrafficScript strings enclosed with double quotation marks. If you need to put a literal '\' in a regular expression, you must escape it as '\\' or enclose the string in single quotation marks. To match a literal string inside a regular expression use the string.regexEscape function. &lt;br/&gt; The optional 'flags' parameter contains a string of single-letter options. The following options are supported: &lt;ul&gt; &lt;li&gt;'g', meaning 'global replace' - apply the regex pattern as many times as possible.&lt;/li&gt; &lt;li&gt;'i', meaning 'case insensitive' - letters in the pattern match both upper and lower case letters.&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt; string.regexsub() returns the string with the replacements. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.regexmatch" />
               </relatedFunctions>
            </func>
            <func name="string.replace">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="search" />
                  <param name="replacement" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Replaces the first occurrence of the search string in the supplied string with the replacement. It is case-sensitive and returns the string with the replacement. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.replaceI" />
                  <related func="string.replaceAll" />
                  <related func="string.replaceAllI" />
               </relatedFunctions>
            </func>
            <func name="string.replaceAll">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="search" />
                  <param name="replacement" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Replaces all occurrences of the search string in the supplied string with the replacement. It is case-sensitive and returns the string with the replacements. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.replaceAllI" />
                  <related func="string.replace" />
                  <related func="string.replaceI" />
               </relatedFunctions>
            </func>
            <func name="string.replaceAllI">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="search" />
                  <param name="replacement" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Replaces all occurrences of the search string in the supplied string with the replacement. It is case-insensitive and returns the string with the replacements. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.replaceAll" />
                  <related func="string.replaceI" />
                  <related func="string.replace" />
               </relatedFunctions>
            </func>
            <func name="string.replaceBytes">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="replacement" />
                  <param name="offset" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Replaces a portion of a string with a replacement string at the supplied offset. It returns a modified version of the original string of the same length as the original with the appropriate bytes replaced from the replacement string. &lt;br/&gt; If offset &lt; 0, or offset &gt; length( string ), or length( replacement ) == 0, string.replaceBytes returns the original string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.insertBytes" />
               </relatedFunctions>
            </func>
            <func name="string.replaceI">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="search" />
                  <param name="replacement" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Replaces the first occurrence of the search string in the supplied string with the replacement. It is case-insensitive and returns the string with the replacement. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.replace" />
                  <related func="string.replaceAllI" />
                  <related func="string.replaceAll" />
               </relatedFunctions>
            </func>
            <func name="string.reverse">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the characters of a string in reverse order. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.right">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the last 'count' characters of the provided string. An empty string will be returned if 'count' is less than or equal to zero. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.drop" />
               </relatedFunctions>
            </func>
            <func name="string.skip">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="count" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns all but the first 'count' characters from the input string. An empty string will be returned if 'count' is greater than the length of the original string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.drop" />
                  <related func="string.trim" />
               </relatedFunctions>
            </func>
            <func name="string.split">
               <parameters min="1" max="2" regex="..?">
                  <param name="string" />
                  <param name="separator" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Returns an array containing the substrings of the supplied string that are delimited by the separator. The separator defaults to a space character, so applying this method to a string without supplying the separator character will return an array containing all the individual words in the string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="array.join" />
               </relatedFunctions>
            </func>
            <func name="string.sprintf">
               <parameters min="1" max="INF" regex=".+">
                  <param name="format string" />
                  <param name="arguments" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Behaves like the C library sprintf() function. Only %s, %c, %d and %f are supported. The function returns the generated string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.append" />
               </relatedFunctions>
            </func>
            <func name="string.startsWith">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="prefix" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if the provided string starts with the given prefix, and 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.startsWithI" />
                  <related func="string.endsWith" />
                  <related func="string.contains" />
               </relatedFunctions>
            </func>
            <func name="string.startsWithI">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="prefix" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns 1 if the provided string starts with the given prefix, and 0 otherwise. It is case-insensitive. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.startsWith" />
                  <related func="string.endsWithI" />
                  <related func="string.containsI" />
               </relatedFunctions>
            </func>
            <func name="string.substring">
               <parameters min="3" max="3" regex="...">
                  <param name="string" />
                  <param name="base" />
                  <param name="end" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the substring starting at character position 'base' and ending at position 'end'. &lt;br/&gt; Note that character positions start at 0, and the end position is inclusive. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="string.trim">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the result of removing leading and trailing white space (and control characters) from its input &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.skip" />
                  <related func="string.drop" />
               </relatedFunctions>
            </func>
            <func name="string.unescape">
               <parameters min="1" max="1" regex=".">
                  <param name="escaped string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the escape-decoded version of its parameter. &lt;br/&gt; %-encoded characters are replaced with their decoded versions. %u-encoded characters are replaced with their UTF-8 representation. If there are illegal digits which cannot safely be converted, the variable $1 is set to 0 and the result contains '_' in place of the '%'. Such malicious %-escaped URLs are a common way of attacking unassuming servers or applications, and by handling them in this way, the attack is thwarted, but some information about a suspicious request is retained. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.escape" />
                  <related func="string.hexdecode" />
               </relatedFunctions>
            </func>
            <func name="string.uppercase">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts all characters in the provided string to uppercase and returns the result. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.lowercase" />
               </relatedFunctions>
            </func>
            <func name="string.urlencode">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the URL-encoded version of the supplied string to make it safe for including in URLs. It converts unsafe characters to percent+hex form. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.unescape" />
                  <related func="string.htmlencode" />
               </relatedFunctions>
            </func>
            <func name="string.validIPAddress">
               <parameters min="1" max="1" regex=".">
                  <param name="string" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns 4 if the string provided is an IPv4 address, 6 if it is an IPv6 address and 0 if it is not a valid IP address. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.ipmaskmatch" />
               </relatedFunctions>
            </func>
            <func name="string.wildmatch">
               <parameters min="2" max="2" regex="..">
                  <param name="string" />
                  <param name="pattern" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Performs a shell-like wild match on the supplied string. The pattern may contain the wildcard characters '?' (which matches a single character) and '*' (which matches any substring). &lt;br/&gt; It returns 1 if matched, and 0 otherwise. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="string.regexmatch" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="string.gmtime">
         <description>Time parsing functions.</description>
         <functions>
            <func name="string.gmtime.parse">
               <parameters min="1" max="1" regex=".">
                  <param name="str" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
               </restrictions>
               <description>&lt;p&gt; Parses the supplied string as a time stamp and returns the time in seconds since the epoch (1st Jan 1970). Dates before the epoch or after 2038 will produce unexpected results. &lt;br/&gt; Note: Timezone information contained inside the time string is ignored. The time is always assumed to be in GMT. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.gmtime.format" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="sys">
         <description>Functions relating to the local machine.</description>
         <functions>
            <func name="sys.domainname">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the domain name of the host machine. For example, if the machine is named "server1.example.com", sys.domainname() will return "example.com". &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.hostname" />
               </relatedFunctions>
            </func>
            <func name="sys.getenv">
               <parameters min="1" max="1" regex=".">
                  <param name="variable" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the named environment variable, or the empty string if the environment variable does not exists. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="sys.getpid">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the process id of the current process. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
            <func name="sys.hostname">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the hostname of the host machine. For example, if the machine is named "server1.example.com", sys.hostname() will return "server1". &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.domainname" />
               </relatedFunctions>
            </func>
            <func name="sys.time">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the current system time as the number of seconds since midnight, 1/1/1970. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.timeToString" />
                  <related func="sys.localtime.format" />
                  <related func="sys.gmtime.format" />
                  <related func="sys.time.highres" />
               </relatedFunctions>
            </func>
            <func name="sys.timeToString">
               <parameters min="1" max="1" regex=".">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Takes the time in seconds since midnight, 1/1/1970 and if the optional unixtime parameter is provided, returns a formatted string representing that time. If the unixtime parameter is not given, it returns the current time as a formatted string. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="sys.gmtime">
         <description>Date functions using Greenwich Mean Time.</description>
         <functions>
            <func name="sys.gmtime.format">
               <parameters min="1" max="2" regex="..?">
                  <param name="format" />
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts the time into a string format. This function converts using GM time - see sys.localtime.format() to convert using localtime. &lt;p&gt; &lt;table border=1 cellspacing=0 cellpadding=0&gt; &lt;tr&gt;&lt;th&gt;Format&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;th&gt;Format&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%a&lt;/td&gt;&lt;td&gt;Mon Tue Wed ...&lt;/td&gt;&lt;td&gt;%A&lt;/td&gt;&lt;td&gt;Monday Tuesday ...&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%b&lt;/td&gt;&lt;td&gt;Jan Feb Mar ...&lt;/td&gt;&lt;td&gt;%B&lt;/td&gt;&lt;td&gt;January February ...&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;Day of month "01"-"31"&lt;/td&gt;&lt;td&gt;%D&lt;/td&gt;&lt;td&gt;%m/%d/%y&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%e&lt;/td&gt;&lt;td&gt;Day of month " 1"-"31"&lt;/td&gt;&lt;td&gt;%H&lt;/td&gt;&lt;td&gt;Hour of day "00-23"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%h&lt;/td&gt;&lt;td&gt;Equivalent to %b&lt;/td&gt;&lt;td&gt;%I&lt;/td&gt;&lt;td&gt;Hour of day "01" - "12"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%j&lt;/td&gt;&lt;td&gt;Julian day of the year "001" to "366"&lt;/td&gt;&lt;td&gt;%m&lt;/td&gt;&lt;td&gt;Month of year "01" - "12"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%M&lt;/td&gt;&lt;td&gt;Minute "00" - "59"&lt;/td&gt;&lt;td&gt;%n&lt;/td&gt;&lt;td&gt;Newline character&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%p&lt;/td&gt;&lt;td&gt;AM/PM&lt;/td&gt;&lt;td&gt;%r&lt;/td&gt;&lt;td&gt;Time in %I:%M:%S [AM|PM]&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%R&lt;/td&gt;&lt;td&gt;%H:%M&lt;/td&gt;&lt;td&gt;%S&lt;/td&gt;&lt;td&gt;Seconds, output as a number between "00" and "61"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%t&lt;/td&gt;&lt;td&gt;Tab character&lt;/td&gt;&lt;td&gt;%T&lt;/td&gt;&lt;td&gt;%H:%M:%S&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;Day of week (1 = Monday, 7 = Sunday)&lt;/td&gt;&lt;td&gt;%w&lt;/td&gt;&lt;td&gt;Day of week (0 = Sunday, 6 = Saturday)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%y&lt;/td&gt;&lt;td&gt;Year (without century) "00" to "99"&lt;/td&gt;&lt;td&gt;%Y&lt;/td&gt;&lt;td&gt;Year "0000" to "9999"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%Z&lt;/td&gt;&lt;td&gt;Time zone ("GMT")&lt;/td&gt;&lt;td&gt;%%&lt;/td&gt;&lt;td&gt;"%"&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt; If supplied, the optional 'unixtime' parameter specifies the number of seconds since midnight 1/1/1970, and the function returns a formatted string representing that time. If the 'unixtime' value is not provided, the current time will be returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.time.yearday" />
                  <related func="sys.localtime.format" />
                  <related func="string.gmtime.parse" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="sys.localtime">
         <description>Date functions using the local time of the system.</description>
         <functions>
            <func name="sys.localtime.format">
               <parameters min="1" max="2" regex="..?">
                  <param name="format" />
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Converts the time into a string format. This function converts using localtime - see sys.gmtime.format() to convert using GMT. &lt;p&gt; &lt;table border=1 cellspacing=0 cellpadding=0&gt; &lt;tr&gt;&lt;th&gt;Format&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;th&gt;Format&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%a&lt;/td&gt;&lt;td&gt;Mon Tue Wed ...&lt;/td&gt;&lt;td&gt;%A&lt;/td&gt;&lt;td&gt;Monday Tuesday ...&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%b&lt;/td&gt;&lt;td&gt;Jan Feb Mar ...&lt;/td&gt;&lt;td&gt;%B&lt;/td&gt;&lt;td&gt;January February ...&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%d&lt;/td&gt;&lt;td&gt;Day of month "01"-"31"&lt;/td&gt;&lt;td&gt;%D&lt;/td&gt;&lt;td&gt;%m/%d/%y&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%e&lt;/td&gt;&lt;td&gt;Day of month " 1"-"31"&lt;/td&gt;&lt;td&gt;%H&lt;/td&gt;&lt;td&gt;Hour of day "00-23"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%h&lt;/td&gt;&lt;td&gt;Equivalent to %b&lt;/td&gt;&lt;td&gt;%I&lt;/td&gt;&lt;td&gt;Hour of day "01" - "12"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%j&lt;/td&gt;&lt;td&gt;Julian day of the year "001" to "366"&lt;/td&gt;&lt;td&gt;%m&lt;/td&gt;&lt;td&gt;Month of year "01" - "12"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%M&lt;/td&gt;&lt;td&gt;Minute "00" - "59"&lt;/td&gt;&lt;td&gt;%n&lt;/td&gt;&lt;td&gt;Newline character&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%p&lt;/td&gt;&lt;td&gt;AM/PM&lt;/td&gt;&lt;td&gt;%r&lt;/td&gt;&lt;td&gt;Time in %I:%M:%S [AM|PM]&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%R&lt;/td&gt;&lt;td&gt;%H:%M&lt;/td&gt;&lt;td&gt;%S&lt;/td&gt;&lt;td&gt;Seconds, output as a number between "00" and "61"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%t&lt;/td&gt;&lt;td&gt;Tab character&lt;/td&gt;&lt;td&gt;%T&lt;/td&gt;&lt;td&gt;%H:%M:%S&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%u&lt;/td&gt;&lt;td&gt;Day of week (1 = Monday, 7 = Sunday)&lt;/td&gt;&lt;td&gt;%w&lt;/td&gt;&lt;td&gt;Day of week (0 = Sunday, 6 = Saturday)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%y&lt;/td&gt;&lt;td&gt;Year (without century) "00" to "99"&lt;/td&gt;&lt;td&gt;%Y&lt;/td&gt;&lt;td&gt;Year "0000" to "9999"&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;%Z&lt;/td&gt;&lt;td&gt;Time zone (from $TZ)&lt;/td&gt;&lt;td&gt;%%&lt;/td&gt;&lt;td&gt;"%"&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt; If supplied, the optional 'unixtime' parameter specifies the number of seconds since midnight 1/1/1970, and the function returns a formatted string representing that time. If the 'unixtime' value is not provided, the current time will be returned. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.time.yearday" />
                  <related func="sys.gmtime.format" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="sys.time">
         <description>General date functions.</description>
         <functions>
            <func name="sys.time.highres">
               <parameters min="0" max="0" regex=""></parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the current system time as the number of seconds and microseconds since midnight, 1/1/1970. The value is returned as a double, e.g. 1138417190.823265 &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.timeToString" />
                  <related func="sys.localtime.format" />
                  <related func="sys.gmtime.format" />
                  <related func="sys.time" />
               </relatedFunctions>
            </func>
            <func name="sys.time.hour">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the hour of the day in local time (0-23). &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.minutes">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the minutes after the hour in local time (0-59). &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.month">
               <parameters min="0" max="1" regex=".?">
                  <param name="value" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the month of the year in local time (1-12). &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.monthday">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the day of the month in local time (1-31). &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.seconds">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the seconds after the minute in local time. Normally, it returns a number in the range of (0-59), but can be up to 61 to allow for leap seconds. &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.weekday">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the day of the week in local time (1-7). Sunday has the value 1; Saturday has the value 7. &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.year">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the year in local time (1970-2038). &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.yearday" />
                  <related func="sys.time.month" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
            <func name="sys.time.yearday">
               <parameters min="0" max="1" regex=".?">
                  <param name="unixtime" />
               </parameters>
               <restrictions>
                  <restriction type="FEATURE_CORE" />
                  <restriction type="FEATURE_SHORTCUT" />
               </restrictions>
               <description>&lt;p&gt; Returns the day of the year in local time (1-366). &lt;p&gt; If optional parameter 'unixtime' is supplied, then this specifies the time since midnight 1/1/1970 otherwise the current time will be used. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="sys.time" />
                  <related func="sys.time.seconds" />
                  <related func="sys.time.minutes" />
                  <related func="sys.time.hour" />
                  <related func="sys.time.weekday" />
                  <related func="sys.time.monthday" />
                  <related func="sys.time.month" />
                  <related func="sys.time.year" />
                  <related func="sys.localtime.format" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="xml">
         <description>Functions for parsing and manipulating the eXtensible Markup Language.</description>
         <functions>
            <func name="xml.validate">
               <parameters min="2" max="2" regex="..">
                  <param name="document" />
                  <param name="DTD" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_XML" />
                  <restriction type="FEATURE_DEPRECATED" />
               </restrictions>
               <description>&lt;p&gt; Validates an XML document against a DTD. It returns 1 if the document validated correctly, and 0 if it did not. It returns -1 if there was an error parsing the XML document or the DTD. &lt;br/&gt; The XML processing functionality must be enabled by the software license. &lt;/p&gt;&lt;p&gt;&lt;b&gt;Function is deprecated.&lt;/b&gt;&lt;br /&gt;Replaced by xml.validate.dtd&lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="xml.validate">
         <description>Functions for validating the eXtensible Markup Language.</description>
         <functions>
            <func name="xml.validate.dtd">
               <parameters min="2" max="2" regex="..">
                  <param name="document" />
                  <param name="DTD" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_XML" />
               </restrictions>
               <description>&lt;p&gt; Validates an XML document against a DTD. It returns 1 if the document validated correctly, and 0 if it did not. It returns -1 if there was an error parsing the XML document or the DTD. &lt;br/&gt; The XML processing functionality must be enabled by the software license. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="xml.validate.xsd" />
               </relatedFunctions>
            </func>
            <func name="xml.validate.xsd">
               <parameters min="2" max="2" regex="..">
                  <param name="document" />
                  <param name="schema" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_XML" />
               </restrictions>
               <description>&lt;p&gt; Validates an XML document against an XML schema. It returns 1 if the document validated correctly, and 0 if it did not. It returns -1 if there was an error parsing the XML document or the schema. &lt;br/&gt; If the schema against which the document is being validated needs to import another schema file, it will search for it inside Catalog &gt; Extra Files &gt; Miscellaneous Files. &lt;br/&gt; The XML processing functionality must be enabled by the software license. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="xml.validate.dtd" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="xml.xpath">
         <description>Functions for preforming XPath queries on XML data.</description>
         <functions>
            <func name="xml.xpath.matchNodeCount">
               <parameters min="3" max="3" regex="...">
                  <param name="doc" />
                  <param name="nspacemap" />
                  <param name="query" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_XML" />
               </restrictions>
               <description>&lt;p&gt; Applies an XPath query to the supplied XML document. It returns the number of entries in the result node set. &lt;br/&gt; The function will return -1 if there was an error parsing the XML document, XML namespace or XPath query. &lt;br/&gt; Namespaces can be used in the XPath query by defining them in the &lt;b&gt;nspacemap&lt;/b&gt; parameter. This parameter is specified as a space-separated list of identifiers mapped to namespaces. For example, specifying 'xmlns:myns=http://www.example.com/mynamespace' allows you to use the identifier 'myns' in the XPath query to find elements in the 'http://www.example.com/mynamespace' namespace within the XML document. &lt;br/&gt; The XML processing functionality must be enabled by the software license. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="xml.xpath.matchNodeSet" />
               </relatedFunctions>
            </func>
            <func name="xml.xpath.matchNodeSet">
               <parameters min="3" max="3" regex="...">
                  <param name="doc" />
                  <param name="nspacemap" />
                  <param name="query" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_XML" />
               </restrictions>
               <description>&lt;p&gt; Applies an XPath query to the supplied XML document. It returns a string representation of the result node set. &lt;br/&gt; The function will return an empty string if there was an error parsing the XML document, XML namespace or XPath query. &lt;br/&gt; Namespaces can be used in the XPath query by defining them in the &lt;b&gt;nspacemap&lt;/b&gt; parameter. This parameter is specified as a space-separated list of identifiers mapped to namespaces. For example, specifying 'xmlns:myns=http://www.example.com/mynamespace' allows you to use the identifier 'myns' in the XPath query to find elements in the 'http://www.example.com/mynamespace' namespace within the XML document. &lt;br/&gt; The XML processing functionality must be enabled by the software license. &lt;/p&gt;</description>
               <relatedFunctions>
                  <related func="xml.xpath.matchNodeCount" />
               </relatedFunctions>
            </func>
         </functions>
      </group>
      <group name="xml.xslt">
         <description>XSLT transformation functions.</description>
         <functions>
            <func name="xml.xslt.transform">
               <parameters min="2" max="2" regex="..">
                  <param name="document" />
                  <param name="stylesheet" />
               </parameters>
               <restrictions>
                  <restriction type="ZXTM_XML" />
               </restrictions>
               <description>&lt;p&gt; Performs an XSLT transformation on a XML document. It returns the transformed document, or -1 on failure. &lt;br/&gt; The XML processing functionality must be enabled by the software license. &lt;/p&gt;</description>
               <relatedFunctions></relatedFunctions>
            </func>
         </functions>
      </group>
   </groups>
</codedata>
